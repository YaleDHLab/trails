/**
 * TODO:
 *  - recently viewed list
 *  - improve touchtexture sizing when zoomed in
 *  - set attribute of so points with previews have large size in gl
 **/

var dpi = window.devicePixelRatio || 1;

/**
 * Shared state
 **/

function State() {
  this.points = {
    size: 1.0,
    colors: 'default',
    glow: false,
  };
  this.previews = {
    number: 50,
    size: 50,
  };
  this.glow = {
    exposure: 2.0,
    threshold: 0.21,
    strength: 1.2,
    radius: 0.55,
  }
};

/**
* Scene
**/

function World() {
  var start = {
    x: 0.0,
    y: 0.0,
    z: 1,
  }
  var size = getCanvasSize();
  this.scene = new THREE.Scene();
  this.camera = new THREE.PerspectiveCamera(60, size.w / size.h, 0.001, 10);
  this.camera.position.x = start.x;
  this.camera.position.y = start.y;
  this.camera.position.z = start.z;
  this.renderer = new THREE.WebGLRenderer({
    antialias: false,
    alpha: true,
    stencil: false,
    depth: false,
    logarithmicDepthBuffer: false,
    powerPreference: 'high-performance',
  });
  this.renderer.setPixelRatio(1);
  this.renderer.toneMapping = THREE.ReinhardToneMapping;
  this.renderer.toneMappingExposure = state.glow.exposure;
  this.bloom = new THREE.UnrealBloomPass(
    new THREE.Vector2(size.w, size.h), // resolution
    1.5, //
    0.4,
    0.85,
  );
  this.bloom.threshold = state.glow.threshold;
  this.bloom.strength = state.glow.strength;
  this.bloom.radius = state.glow.radius;
  this.bloom.renderToScreen = true;
  this.composer = new THREE.EffectComposer(this.renderer);
  this.composer.addPass(new THREE.RenderPass(this.scene, this.camera));
  this.composer.addPass(this.bloom);
  document.querySelector('#canvas-container').appendChild(this.renderer.domElement);
  this.clock = new THREE.Clock();
  this.controls = new THREE.TrackballControls(this.camera, this.renderer.domElement);
  this.controls.zoomSpeed = 0.4;
  this.controls.panSpeed = 0.4;
  this.controls.mouseButtons.LEFT = THREE.MOUSE.PAN;
  this.controls.mouseButtons.MIDDLE = THREE.MOUSE.ZOOM;
  this.controls.mouseButtons.RIGHT = THREE.MOUSE.ROTATE;
  this.controls.target.x = start.x;
  this.controls.target.y = start.y;
  this.controls.maxDistance = 0.8;
  this.controls.noRotate = true;
  this.addEventListeners();
}

World.prototype.resize = function() {
  var size = getCanvasSize(),
      w = size.w * dpi,
      h = size.h * dpi;
  world.camera.aspect = w / h;
  world.camera.updateProjectionMatrix();
  world.renderer.setSize(w, h, false);
  world.controls.handleResize();
  if (picker.initialized) picker.tex.setSize(w, h);
  if (points.initialized) points.mesh.material.uniforms.height.value = window.innerHeight;
  if (points.initialized) points.mesh.material.uniforms.width.value = window.innerWidth;
  if (picker.initialized) picker.mesh.material.uniforms.height.value = window.innerHeight;
  world.composer.reset();
}

World.prototype.useNightMode = function() {
  points.mesh.material.uniforms.useNightMode.value = 1.0;
  document.body.classList.add('night-mode');
}

World.prototype.useDayMode = function() {
  points.mesh.material.uniforms.useNightMode.value = 0.0;
  document.body.classList.remove('night-mode');
}

World.prototype.render = function() {
  requestAnimationFrame(this.render.bind(this));
  if (points.initialized && state.points.glow) {
    this.composer.render();
  } else {
    this.renderer.render(world.scene, world.camera);
  }
  this.controls.update();
  touchtexture.update();
  stats.update();
  points.update();
  if (lasso) lasso.update();
}

World.prototype.addEventListeners = function() {
  window.addEventListener('resize', function(e) {
    this.resize()
  }.bind(this));
}

/**
* Points
**/

function Points() {}

Points.prototype.init = function() {
  this.mesh = null;
  this.initialized = false;
  this.positions = [];
  this.objects = [];
  this.colors = [];
  this.n = null;
  this.max = 150000;
  Promise.all([
    fetch('data/objects.json'),
    fetch('data/positions.json'),
    fetch('data/colors.json'),
  ]).then(results => {
    const [objects, positions, colors] = results;
    this.handleDataJson('objects', objects);
    this.handleDataJson('positions', positions);
    this.handleDataJson('colors', colors);
  })
}

Points.prototype.handleDataJson = function(attr, response) {
  if (response.status === 200) response.json().then(json => {
    this[attr] = json.slice(0, this.max);
    this.n = this[attr].length;
    this.initialize();
  })
}

Points.prototype.setColors = function() {
  // get the new colortype
  val = state.points.colors;
  // set perlin uniform
  if (val === 'perlin') {
    this.mesh.material.uniforms.usePerlin.value = 1.0;
  // create non-perlin color attributes
  } else {
    // handle the case of 1d colors
    if (typeof this.colors[0] !== 'object') {
      this.cmap = interpolateArray(colorScales[val]);
    }
    var colors = new Float32Array(this.positions.length * 3),
        index = 0;
    for (var i=0; i<this.colors.length; i++) {
      var color = this.colors[i].length === 3
        ? {
            r: this.colors[i][0]/255,
            g: this.colors[i][1]/255,
            b: this.colors[i][2]/255,
          }
        : this.cmap((this.colors || {})[i] || 0);
      colors[index++] = color.r;
      colors[index++] = color.g;
      colors[index++] = color.b;
    }
    this.mesh.material.uniforms.usePerlin.value = 0.0;
    this.mesh.geometry.attributes.color.array = colors;
    this.mesh.geometry.attributes.color.needsUpdate = true;
  }
}

Points.prototype.setAttribute = function(name, arr) {
  this.mesh.geometry.attributes[name].array = arr;
  this.mesh.geometry.attributes[name].needsUpdate = true;
}

Points.prototype.initialize = function() {
  if (this.positions.length && this.objects.length && this.colors.length) {
    this.createMesh();
    // initialize downstream layers that depend on this mesh
    picker.init();
    preview.timeout = setTimeout(preview.redraw.bind(preview), 1000);
    // flip the initialized attr
    this.initialized = true;
    document.querySelector('#loader').style.display = 'none';
  }
}

Points.prototype.createMesh = function() {
  preview.createIndex(this.positions);
  var clickColor = new THREE.Color(),
      clickColors = new Float32Array(this.positions.length * 3),
      colors = new Float32Array(this.positions.length * 3),
      translations = new Float32Array(this.positions.length * 3),
      selected = new Float32Array(this.positions.length * 1),
      translationIterator = 0,
      colorIterator = 0,
      clickColorIterator = 0;
  for (var i=0; i<this.positions.length; i++) {
    clickColor.setHex(i + 1);
    translations[translationIterator++] = this.positions[i][0];
    translations[translationIterator++] = this.positions[i][1];
    translations[translationIterator++] = 0;
    clickColors[clickColorIterator++] = clickColor.r;
    clickColors[clickColorIterator++] = clickColor.g;
    clickColors[clickColorIterator++] = clickColor.b;
  }
  // create the geometry
  var geometry = new THREE.InstancedBufferGeometry();
  var position = new THREE.BufferAttribute(new Float32Array([0, 0, 0]), 3);
  var translation = new THREE.InstancedBufferAttribute(translations, 3, false, 1);
  var color = new THREE.InstancedBufferAttribute(colors, 3, false, 1);
  var clickColor = new THREE.InstancedBufferAttribute(clickColors, 3, false, 1);
  var selected = new THREE.InstancedBufferAttribute(selected, 1, false, 1);
  geometry.setAttribute('position', position);
  geometry.setAttribute('translation', translation);
  geometry.setAttribute('color', color);
  geometry.setAttribute('clickColor', clickColor);
  geometry.setAttribute('selected', selected);
  // build the mesh
  this.mesh = new THREE.Points(geometry, this.getMaterial());
  this.mesh.frustumCulled = false;
  this.setColors();
  world.scene.add(this.mesh);
}

Points.prototype.getMaterial = function() {
  var perlin = `
    // Perlin Noise by Sushindhran Harikrishnan
    vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
    vec4 mod289(vec4 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }
    vec4 permute(vec4 x) { return mod289(((x*34.0)+1.0)*x); }
    vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }
    vec3 fade(vec3 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }
    float noise(vec3 P) {
        vec3 i0 = mod289(floor(P)), i1 = mod289(i0 + vec3(1.0));
        vec3 f0 = fract(P), f1 = f0 - vec3(1.0), f = fade(f0);
        vec4 ix = vec4(i0.x, i1.x, i0.x, i1.x), iy = vec4(i0.yy, i1.yy);
        vec4 iz0 = i0.zzzz, iz1 = i1.zzzz;
        vec4 ixy = permute(permute(ix) + iy), ixy0 = permute(ixy + iz0), ixy1 = permute(ixy + iz1);
        vec4 gx0 = ixy0 * (1.0 / 7.0), gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
        vec4 gx1 = ixy1 * (1.0 / 7.0), gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
        gx0 = fract(gx0); gx1 = fract(gx1);
        vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0), sz0 = step(gz0, vec4(0.0));
        vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1), sz1 = step(gz1, vec4(0.0));
        gx0 -= sz0 * (step(0.0, gx0) - 0.5); gy0 -= sz0 * (step(0.0, gy0) - 0.5);
        gx1 -= sz1 * (step(0.0, gx1) - 0.5); gy1 -= sz1 * (step(0.0, gy1) - 0.5);
        vec3 g0 = vec3(gx0.x,gy0.x,gz0.x), g1 = vec3(gx0.y,gy0.y,gz0.y),
            g2 = vec3(gx0.z,gy0.z,gz0.z), g3 = vec3(gx0.w,gy0.w,gz0.w),
            g4 = vec3(gx1.x,gy1.x,gz1.x), g5 = vec3(gx1.y,gy1.y,gz1.y),
            g6 = vec3(gx1.z,gy1.z,gz1.z), g7 = vec3(gx1.w,gy1.w,gz1.w);
        vec4 norm0 = taylorInvSqrt(vec4(dot(g0,g0), dot(g2,g2), dot(g1,g1), dot(g3,g3)));
        vec4 norm1 = taylorInvSqrt(vec4(dot(g4,g4), dot(g6,g6), dot(g5,g5), dot(g7,g7)));
        g0 *= norm0.x; g2 *= norm0.y; g1 *= norm0.z; g3 *= norm0.w;
        g4 *= norm1.x; g6 *= norm1.y; g5 *= norm1.z; g7 *= norm1.w;
        vec4 nz = mix(vec4(dot(g0, vec3(f0.x, f0.y, f0.z)), dot(g1, vec3(f1.x, f0.y, f0.z)),
            dot(g2, vec3(f0.x, f1.y, f0.z)), dot(g3, vec3(f1.x, f1.y, f0.z))),
            vec4(dot(g4, vec3(f0.x, f0.y, f1.z)), dot(g5, vec3(f1.x, f0.y, f1.z)),
                dot(g6, vec3(f0.x, f1.y, f1.z)), dot(g7, vec3(f1.x, f1.y, f1.z))), f.z);
        return 2.2 * mix(mix(nz.x,nz.z,f.y), mix(nz.y,nz.w,f.y), f.x);
    }
    float noise(vec2 P) { return noise(vec3(P, 0.0)); }
    float fractal(vec3 P) {
        float f = 0., s = 1.;
        for (int i = 0 ; i < 9 ; i++) {
            f += noise(s * P) / s;
            s *= 2.;
            P = vec3(.866 * P.x + .5 * P.z, P.y + 100., -.5 * P.x + .866 * P.z);
        }
        return f;
    }
    float turbulence(vec3 P) {
        float f = 0., s = 1.;
        for (int i = 0 ; i < 9 ; i++) {
            f += abs(noise(s * P)) / s;
            //s *= 2.0;
            P = vec3(.866 * P.x + .5 * P.z, P.y + 100., -.5 * P.x + .866 * P.z);
        }
        return f;
    }

    vec3 clouds(float x, float y) {
        float L = turbulence(vec3(x, y, time * .025));
        return vec3(noise(vec3(.5, .5, L) * 1.2));
    }
  `

  return new THREE.RawShaderMaterial({
    vertexShader: `
      precision mediump float;

      uniform mat4 modelViewMatrix;
      uniform mat4 projectionMatrix;
      uniform vec3 cameraPosition;
      uniform float dpi;
      uniform float height;
      uniform float width;
      uniform sampler2D touchtexture;
      uniform float time;
      uniform float size;
      uniform float usePerlin;

      attribute vec3 position;
      attribute vec3 translation;
      attribute vec3 color;
      attribute vec3 clickColor;
      attribute float selected;

      varying vec3 vColor;
      varying vec3 vClickColor;
      varying float vSize;
      varying float vSelected;

      // PERLIN_NOISE

      void main() {

        // position and project the point
        vec3 pos = position + translation;
        pos.z = pos.z + sin(time) / 20000.0;

        vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);
        gl_Position = projectionMatrix * mvPosition;

        // convert gl_Position to 0:1 on each axis for touchtexture lookups
        float x = (gl_Position.x + cameraPosition.z) / (2.0 * cameraPosition.z);
        float y = (gl_Position.y + cameraPosition.z) / (2.0 * cameraPosition.z);

        // scale the point size by the device DPI and window height
        gl_PointSize = size / 1000.0 * dpi * height / -mvPosition.z;

        // adjust the point size based on the touchtexture
        vec4 brightness = texture2D(touchtexture, vec2(x, y));
        float touchSize = gl_PointSize * 200.0 * brightness.r * cameraPosition.z;
        // scale point size with touch texture
        gl_PointSize = max(gl_PointSize, touchSize);
        // set min point size
        gl_PointSize = max(gl_PointSize, 1.0);
        // set max point size
        gl_PointSize = min(gl_PointSize, 30.0);

        // pass varyings
        vColor = usePerlin > 0.5
          ? clouds(gl_Position.x, gl_Position.y) + vec3(.5, .8, 0.95)
          : color;
        vClickColor = clickColor;
        vSelected = selected;
        vSize = gl_PointSize;
      }
    `.replace('// PERLIN_NOISE', perlin),
    fragmentShader: `
      precision mediump float;

      uniform sampler2D grit;
      uniform float useColor;
      uniform float useNightMode;

      varying vec3 vColor;
      varying vec3 vClickColor;
      varying float vSize;
      varying float vSelected;

      void red() {
        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
      }

      void main() {
        // get point shape
        float r = length(gl_PointCoord - vec2(0.5));
        if (r > 0.5) discard;
        if (useNightMode > 0.5) {
          gl_FragColor = vec4(vColor, 1.0);
        } else {
          gl_FragColor = texture2D(grit, gl_PointCoord * vSize / 200.0); // grit
          if (vSelected > 0.5) {
            vec4 selectedColor = vec4(1.0, 0.54, 0.0, 1.0);
            if (r < 0.47) gl_FragColor = selectedColor;
          }
        }

        // overwrite colors if we're GPU picking
        if (useColor > 0.5) gl_FragColor = vec4(vClickColor, 1.0);
      }
    `,
    uniforms: {
      height: {
        type: 'f',
        value: world.renderer.domElement.clientHeight,
      },
      width: {
        type: 'f',
        value: world.renderer.domElement.clientWidth,
      },
      dpi: {
        type: 'f',
        value: dpi,
      },
      grit: {
        type: 't',
        value: getTexture('assets/images/particle-texture.jpg'),
      },
      touchtexture: {
        type: 't',
        value: touchtexture.texture,
      },
      useColor: {
        type: 'f',
        value: 0.0,
      },
      useNightMode: {
        type: 'f',
        value: 1.0,
      },
      time: {
        type: 'f',
        value: 0.0,
      },
      size: {
        type: 'f',
        value: state.points.size,
      },
      usePerlin: {
        type: 'f',
        value: state.points.colors === 'perlin' ? 1.0 : 0.0,
      }
    }
  });
}

Points.prototype.update = function() {
  if (this.mesh) this.mesh.material.uniforms.time.value += world.clock.getDelta();
}

/**
* Color
**/

// from matplotlib import cm
// print(cm.viridis.colors)
// print([list(cm.YlGnBu(i)[:3]) for i in range(255)])
var colorScales = {
  blues: [[1.0, 1.0, 0.8509803921568627], [0.9977854671280277, 0.9991387927720108, 0.8460592079969242], [0.9955709342560554, 0.9982775855440216, 0.8411380238369858], [0.9933564013840831, 0.9974163783160322, 0.8362168396770473], [0.9911418685121107, 0.996555171088043, 0.8312956555171088], [0.9889273356401385, 0.9956939638600538, 0.8263744713571703], [0.9867128027681661, 0.9948327566320646, 0.8214532871972318], [0.9844982698961938, 0.9939715494040754, 0.8165321030372933], [0.9822837370242214, 0.9931103421760861, 0.8116109188773548], [0.9800692041522492, 0.9922491349480969, 0.8066897347174163], [0.9778546712802768, 0.9913879277201076, 0.8017685505574779], [0.9756401384083045, 0.9905267204921184, 0.7968473663975394], [0.9734256055363322, 0.9896655132641292, 0.7919261822376009], [0.9712110726643599, 0.9888043060361399, 0.7870049980776624], [0.9689965397923875, 0.9879430988081507, 0.782083813917724], [0.9667820069204153, 0.9870818915801615, 0.7771626297577854], [0.9645674740484429, 0.9862206843521722, 0.772241445597847], [0.9623529411764706, 0.985359477124183, 0.7673202614379084], [0.9601384083044983, 0.9844982698961937, 0.76239907727797], [0.957923875432526, 0.9836370626682045, 0.7574778931180315], [0.9557093425605536, 0.9827758554402153, 0.752556708958093], [0.9534948096885814, 0.9819146482122261, 0.7476355247981545], [0.951280276816609, 0.9810534409842369, 0.7427143406382161], [0.9490657439446367, 0.9801922337562476, 0.7377931564782776], [0.9468512110726643, 0.9793310265282583, 0.7328719723183391], [0.9446366782006921, 0.9784698193002691, 0.7279507881584006], [0.9424221453287197, 0.9776086120722799, 0.7230296039984621], [0.9402076124567474, 0.9767474048442907, 0.7181084198385236], [0.9379930795847751, 0.9758861976163014, 0.7131872356785851], [0.9357785467128028, 0.9750249903883121, 0.7082660515186466], [0.9335640138408304, 0.9741637831603229, 0.7033448673587082], [0.9313494809688582, 0.9733025759323337, 0.6984236831987697], [0.9288273740868896, 0.972318339100346, 0.6941637831603229], [0.9241522491349482, 0.970472895040369, 0.6945328719723183], [0.9194771241830065, 0.9686274509803922, 0.6949019607843137], [0.914801999231065, 0.9667820069204152, 0.6952710495963091], [0.9101268742791234, 0.9649365628604383, 0.6956401384083045], [0.9054517493271819, 0.9630911188004614, 0.6960092272202999], [0.9007766243752403, 0.9612456747404844, 0.6963783160322953], [0.8961014994232988, 0.9594002306805075, 0.6967474048442907], [0.8914263744713572, 0.9575547866205305, 0.697116493656286], [0.8867512495194156, 0.9557093425605536, 0.6974855824682814], [0.8820761245674741, 0.9538638985005767, 0.6978546712802768], [0.8774009996155325, 0.9520184544405997, 0.6982237600922722], [0.872725874663591, 0.9501730103806229, 0.6985928489042675], [0.8680507497116494, 0.9483275663206459, 0.698961937716263], [0.8633756247597079, 0.946482122260669, 0.6993310265282584], [0.8587004998077663, 0.944636678200692, 0.6997001153402538], [0.8540253748558247, 0.9427912341407151, 0.7000692041522492], [0.8493502499038832, 0.9409457900807382, 0.7004382929642445], [0.8446751249519415, 0.9391003460207612, 0.7008073817762399], [0.84, 0.9372549019607843, 0.7011764705882353], [0.8353248750480584, 0.9354094579008073, 0.7015455594002307], [0.830649750096117, 0.9335640138408304, 0.701914648212226], [0.8259746251441753, 0.9317185697808535, 0.7022837370242214], [0.8212995001922337, 0.9298731257208765, 0.7026528258362169], [0.8166243752402922, 0.9280276816608997, 0.7030219146482123], [0.8119492502883506, 0.9261822376009227, 0.7033910034602077], [0.8072741253364091, 0.9243367935409458, 0.703760092272203], [0.8025990003844675, 0.9224913494809688, 0.7041291810841984], [0.797923875432526, 0.9206459054209919, 0.7044982698961938], [0.7932487504805844, 0.918800461361015, 0.7048673587081892], [0.7885736255286429, 0.916955017301038, 0.7052364475201846], [0.7838985005767013, 0.9151095732410611, 0.7056055363321799], [0.7781776239907728, 0.9128642829680892, 0.7060976547481739], [0.7693194925028836, 0.9094194540561322, 0.7069588619761631], [0.7604613610149944, 0.9059746251441754, 0.7078200692041523], [0.751603229527105, 0.9025297962322184, 0.7086812764321415], [0.7427450980392157, 0.8990849673202614, 0.7095424836601307], [0.7338869665513265, 0.8956401384083045, 0.7104036908881199], [0.7250288350634372, 0.8921953094963475, 0.7112648981161093], [0.7161707035755479, 0.8887504805843907, 0.7121261053440985], [0.7073125720876586, 0.8853056516724337, 0.7129873125720877], [0.6984544405997694, 0.8818608227604767, 0.7138485198000769], [0.6895963091118802, 0.8784159938485199, 0.7147097270280661], [0.6807381776239908, 0.8749711649365628, 0.7155709342560553], [0.6718800461361015, 0.8715263360246059, 0.7164321414840447], [0.6630219146482123, 0.868081507112649, 0.7172933487120339], [0.654163783160323, 0.864636678200692, 0.7181545559400231], [0.6453056516724337, 0.8611918492887352, 0.7190157631680123], [0.6364475201845444, 0.8577470203767782, 0.7198769703960015], [0.6275893886966551, 0.8543021914648212, 0.7207381776239907], [0.618731257208766, 0.8508573625528644, 0.7215993848519799], [0.6098731257208766, 0.8474125336409073, 0.7224605920799693], [0.6010149942329873, 0.8439677047289504, 0.7233217993079585], [0.592156862745098, 0.8405228758169935, 0.7241830065359477], [0.5832987312572088, 0.8370780469050365, 0.7250442137639369], [0.5744405997693195, 0.8336332179930797, 0.7259054209919261], [0.5655824682814302, 0.8301883890811227, 0.7267666282199154], [0.5567243367935409, 0.8267435601691657, 0.7276278354479047], [0.5478662053056518, 0.8232987312572089, 0.7284890426758939], [0.5390080738177624, 0.8198539023452518, 0.7293502499038831], [0.5301499423298732, 0.8164090734332949, 0.7302114571318723], [0.521291810841984, 0.812964244521338, 0.7310726643598615], [0.5124336793540947, 0.809519415609381, 0.7319338715878507], [0.5035755478662054, 0.8060745866974242, 0.73279507881584], [0.4951787773933103, 0.8028604382929643, 0.733748558246828], [0.4875509419454056, 0.8000307574009996, 0.7348558246828143], [0.4799231064975011, 0.797201076509035, 0.7359630911188004], [0.4722952710495963, 0.7943713956170704, 0.7370703575547866], [0.46466743560169166, 0.7915417147251057, 0.7381776239907727], [0.45703960015378703, 0.7887120338331411, 0.7392848904267589], [0.44941176470588234, 0.7858823529411765, 0.7403921568627451], [0.4417839292579777, 0.7830526720492119, 0.7414994232987312], [0.43415609381007303, 0.7802229911572472, 0.7426066897347174], [0.4265282583621684, 0.7773933102652826, 0.7437139561707036], [0.4189004229142639, 0.774563629373318, 0.7448212226066897], [0.4112725874663591, 0.7717339484813533, 0.7459284890426758], [0.40364475201845446, 0.7689042675893887, 0.7470357554786621], [0.39601691657054977, 0.7660745866974241, 0.7481430219146482], [0.38838908112264514, 0.7632449058054595, 0.7492502883506343], [0.38076124567474046, 0.7604152249134948, 0.7503575547866205], [0.3731334102268358, 0.7575855440215302, 0.7514648212226067], [0.3655055747789312, 0.7547558631295656, 0.7525720876585928], [0.3578777393310266, 0.751926182237601, 0.753679354094579], [0.3502499038831219, 0.7490965013456363, 0.7547866205305652], [0.34262206843521725, 0.7462668204536717, 0.7558938869665514], [0.33499423298731257, 0.7434371395617071, 0.7570011534025375], [0.3273663975394079, 0.7406074586697424, 0.7581084198385236], [0.3197385620915033, 0.7377777777777779, 0.7592156862745099], [0.3121107266435986, 0.7349480968858132, 0.760322952710496], [0.30448289119569394, 0.7321184159938485, 0.7614302191464821], [0.2968550557477894, 0.729288735101884, 0.7625374855824683], [0.2892272202998847, 0.7264590542099193, 0.7636447520184545], [0.28159938485198, 0.7236293733179546, 0.7647520184544406], [0.27397154940407537, 0.7207996924259901, 0.7658592848904268], [0.26634371395617074, 0.7179700115340254, 0.766966551326413], [0.25871587850826605, 0.7151403306420607, 0.7680738177623991], [0.2526874279123414, 0.7114494425221068, 0.7683813917723953], [0.24825836216839675, 0.7068973471741637, 0.7678892733564014], [0.2438292964244521, 0.7023452518262207, 0.7673971549404076], [0.23940023068050748, 0.6977931564782776, 0.7669050365244138], [0.23497116493656298, 0.6932410611303347, 0.7664129181084199], [0.2305420991926182, 0.6886889657823914, 0.765920799692426], [0.22611303344867356, 0.6841368704344483, 0.7654286812764322], [0.22168396770472892, 0.6795847750865052, 0.7649365628604383], [0.21725490196078429, 0.6750326797385621, 0.7644444444444445], [0.21282583621683965, 0.670480584390619, 0.7639523260284506], [0.208396770472895, 0.6659284890426759, 0.7634602076124568], [0.20396770472895037, 0.6613763936947328, 0.762968089196463], [0.19953863898500573, 0.6568242983467897, 0.762475970780469], [0.19510957324106112, 0.6522722029988466, 0.7619838523644752], [0.19068050749711646, 0.6477201076509035, 0.7614917339484814], [0.18625144175317185, 0.6431680123029604, 0.7609996155324875], [0.18182237600922718, 0.6386159169550173, 0.7605074971164937], [0.17739331026528254, 0.6340638216070742, 0.7600153787004998], [0.1729642445213379, 0.6295117262591311, 0.759523260284506], [0.16853517877739327, 0.624959630911188, 0.7590311418685122], [0.16410611303344877, 0.620407535563245, 0.7585390234525183], [0.15967704728950402, 0.6158554402153018, 0.7580469050365244], [0.15524798154555938, 0.6113033448673587, 0.7575547866205306], [0.15081891580161474, 0.6067512495194156, 0.7570626682045367], [0.1463898500576701, 0.6021991541714725, 0.7565705497885429], [0.14196078431372547, 0.5976470588235294, 0.756078431372549], [0.13753171856978083, 0.5930949634755863, 0.7555863129565552], [0.1331026528258362, 0.5885428681276432, 0.7550941945405614], [0.12867358708189156, 0.5839907727797001, 0.7546020761245674], [0.12424452133794692, 0.579438677431757, 0.7541099577085736], [0.11981545559400228, 0.5748865820838138, 0.7536178392925797], [0.11538638985005764, 0.5703344867358708, 0.7531257208765859], [0.11410995770857363, 0.5647058823529412, 0.7510957324106113], [0.11472510572856594, 0.5584313725490195, 0.7481430219146482], [0.11534025374855825, 0.552156862745098, 0.7451903114186851], [0.11595540176855056, 0.5458823529411765, 0.7422376009227221], [0.11657054978854285, 0.5396078431372551, 0.739284890426759], [0.11718569780853517, 0.5333333333333333, 0.7363321799307958], [0.11780084582852748, 0.5270588235294118, 0.7333794694348328], [0.1184159938485198, 0.5207843137254902, 0.7304267589388697], [0.1190311418685121, 0.5145098039215686, 0.7274740484429065], [0.11964628988850443, 0.508235294117647, 0.7245213379469435], [0.12026143790849673, 0.5019607843137255, 0.7215686274509804], [0.12087658592848904, 0.4956862745098039, 0.7186159169550173], [0.12149173394848135, 0.4894117647058823, 0.7156632064590542], [0.12210688196847366, 0.4831372549019608, 0.7127104959630911], [0.12272202998846597, 0.4768627450980392, 0.709757785467128], [0.12333717800845828, 0.47058823529411764, 0.706805074971165], [0.12395232602845059, 0.46431372549019606, 0.7038523644752018], [0.1245674740484429, 0.4580392156862745, 0.7008996539792387], [0.12518262206843522, 0.45176470588235296, 0.6979469434832757], [0.12579777008842752, 0.4454901960784314, 0.6949942329873126], [0.12641291810841981, 0.43921568627451, 0.6920415224913495], [0.12702806612841214, 0.4329411764705883, 0.6890888119953864], [0.12764321414840446, 0.42666666666666664, 0.6861361014994233], [0.12825836216839676, 0.4203921568627451, 0.6831833910034601], [0.12887351018838908, 0.41411764705882353, 0.6802306805074971], [0.1294886582083814, 0.40784313725490196, 0.677277970011534], [0.1301038062283737, 0.40156862745098043, 0.6743252595155709], [0.13071895424836602, 0.3952941176470588, 0.6713725490196079], [0.13133410226835832, 0.38901960784313727, 0.6684198385236447], [0.13194925028835064, 0.3827450980392157, 0.6654671280276816], [0.13256439830834293, 0.3764705882352941, 0.6625144175317186], [0.13317954632833526, 0.3701960784313726, 0.6595617070357555], [0.13361014994232986, 0.3647520184544406, 0.6569780853517878], [0.13397923875432527, 0.3595847750865052, 0.6545174932718185], [0.13434832756632065, 0.3544175317185698, 0.6520569011918493], [0.13471741637831602, 0.3492502883506344, 0.64959630911188], [0.1350865051903114, 0.34408304498269915, 0.6471357170319109], [0.1354555940023068, 0.3389158016147636, 0.6446751249519416], [0.13582468281430218, 0.33374855824682814, 0.6422145328719723], [0.1361937716262976, 0.32858131487889275, 0.6397539407920031], [0.13656286043829297, 0.32341407151095736, 0.6372933487120338], [0.13693194925028834, 0.3182468281430219, 0.6348327566320646], [0.13730103806228375, 0.3130795847750865, 0.6323721645520953], [0.13767012687427913, 0.3079123414071511, 0.6299115724721261], [0.1380392156862745, 0.3027450980392157, 0.6274509803921569], [0.1384083044982699, 0.2975778546712803, 0.6249903883121877], [0.13877739331026528, 0.2924106113033449, 0.6225297962322184], [0.13914648212226066, 0.28724336793540944, 0.6200692041522492], [0.13951557093425607, 0.28207612456747405, 0.6176086120722799], [0.13988465974625144, 0.27690888119953866, 0.6151480199923107], [0.14025374855824682, 0.2717416378316032, 0.6126874279123414], [0.14062283737024223, 0.2665743944636678, 0.6102268358323721], [0.1409919261822376, 0.26140715109573254, 0.6077662437524031], [0.14136101499423298, 0.25623990772779703, 0.6053056516724337], [0.14173010380622839, 0.2510726643598616, 0.6028450595924645], [0.14209919261822376, 0.2459054209919262, 0.6003844675124952], [0.14246828143021917, 0.24073817762399077, 0.597923875432526], [0.14283737024221455, 0.23557093425605535, 0.5954632833525567], [0.14320645905420992, 0.23040369088811996, 0.5930026912725875], [0.14357554786620533, 0.22523644752018454, 0.5905420991926182], [0.1439446366782007, 0.22006920415224912, 0.5880815071126491], [0.14431372549019608, 0.21490196078431373, 0.5856209150326798], [0.1446828143021915, 0.2097347174163783, 0.5831603229527106], [0.14505190311418686, 0.2045674740484429, 0.5806997308727413], [0.1419761630142253, 0.20144559784698193, 0.5739331026528259], [0.1384083044982699, 0.1986159169550173, 0.5665513264129182], [0.1348404459823145, 0.19578623606305268, 0.5591695501730104], [0.13127258746635911, 0.19295655517108803, 0.5517877739331027], [0.1277047289504038, 0.1901268742791235, 0.5444059976931952], [0.1241368704344483, 0.18729719338715878, 0.5370242214532872], [0.1205690119184929, 0.18446751249519416, 0.5296424452133796], [0.1170011534025375, 0.18163783160322952, 0.5222606689734718], [0.11343329488658209, 0.17880815071126488, 0.514878892733564], [0.10986543637062668, 0.17597846981930026, 0.5074971164936564], [0.10629757785467128, 0.17314878892733565, 0.5001153402537486], [0.10272971933871589, 0.170319108035371, 0.49273356401384083], [0.09916186082276049, 0.16748942714340637, 0.4853517877739331], [0.09559400230680508, 0.16465974625144175, 0.4779700115340254], [0.09202614379084967, 0.16183006535947714, 0.47058823529411764], [0.08845828527489427, 0.1590003844675125, 0.46320645905420993], [0.08489042675893888, 0.15617070357554785, 0.4558246828143022], [0.08132256824298348, 0.15334102268358324, 0.44844290657439445], [0.07775470972702807, 0.1505113417916186, 0.44106113033448674], [0.07418685121107267, 0.14768166089965398, 0.43367935409457903], [0.07061899269511737, 0.14485198000768942, 0.4262975778546715], [0.06705113417916186, 0.14202229911572473, 0.41891580161476355], [0.06348327566320647, 0.13919261822376008, 0.41153402537485584], [0.05991541714725106, 0.13636293733179544, 0.40415224913494807], [0.05634755863129566, 0.13353325643983083, 0.3967704728950404], [0.05277970011534025, 0.1307035755478662, 0.38938869665513265], [0.049211841599384853, 0.12787389465590157, 0.3820069204152249], [0.04564398308342946, 0.12504421376393693, 0.3746251441753172], [0.042076124567474046, 0.12221453287197231, 0.36724336793540946], [0.03850826605151865, 0.11938485198000769, 0.3598615916955017], [0.03494040753556324, 0.11655517108804306, 0.35247981545559404]],
  plasma: [[0.050383, 0.029803, 0.527975], [0.063536, 0.028426, 0.533124], [0.075353, 0.027206, 0.538007], [0.086222, 0.026125, 0.542658], [0.096379, 0.025165, 0.547103], [0.10598, 0.024309, 0.551368], [0.115124, 0.023556, 0.555468], [0.123903, 0.022878, 0.559423], [0.132381, 0.022258, 0.56325], [0.140603, 0.021687, 0.566959], [0.148607, 0.021154, 0.570562], [0.156421, 0.020651, 0.574065], [0.16407, 0.020171, 0.577478], [0.171574, 0.019706, 0.580806], [0.17895, 0.019252, 0.584054], [0.186213, 0.018803, 0.587228], [0.193374, 0.018354, 0.59033], [0.200445, 0.017902, 0.593364], [0.207435, 0.017442, 0.596333], [0.21435, 0.016973, 0.599239], [0.221197, 0.016497, 0.602083], [0.227983, 0.016007, 0.604867], [0.234715, 0.015502, 0.607592], [0.241396, 0.014979, 0.610259], [0.248032, 0.014439, 0.612868], [0.254627, 0.013882, 0.615419], [0.261183, 0.013308, 0.617911], [0.267703, 0.012716, 0.620346], [0.274191, 0.012109, 0.622722], [0.280648, 0.011488, 0.625038], [0.287076, 0.010855, 0.627295], [0.293478, 0.010213, 0.62949], [0.299855, 0.009561, 0.631624], [0.30621, 0.008902, 0.633694], [0.312543, 0.008239, 0.6357], [0.318856, 0.007576, 0.63764], [0.32515, 0.006915, 0.639512], [0.331426, 0.006261, 0.641316], [0.337683, 0.005618, 0.643049], [0.343925, 0.004991, 0.64471], [0.35015, 0.004382, 0.646298], [0.356359, 0.003798, 0.64781], [0.362553, 0.003243, 0.649245], [0.368733, 0.002724, 0.650601], [0.374897, 0.002245, 0.651876], [0.381047, 0.001814, 0.653068], [0.387183, 0.001434, 0.654177], [0.393304, 0.001114, 0.655199], [0.399411, 0.000859, 0.656133], [0.405503, 0.000678, 0.656977], [0.41158, 0.000577, 0.65773], [0.417642, 0.000564, 0.65839], [0.423689, 0.000646, 0.658956], [0.429719, 0.000831, 0.659425], [0.435734, 0.001127, 0.659797], [0.441732, 0.00154, 0.660069], [0.447714, 0.00208, 0.66024], [0.453677, 0.002755, 0.66031], [0.459623, 0.003574, 0.660277], [0.46555, 0.004545, 0.660139], [0.471457, 0.005678, 0.659897], [0.477344, 0.00698, 0.659549], [0.48321, 0.00846, 0.659095], [0.489055, 0.010127, 0.658534], [0.494877, 0.01199, 0.657865], [0.500678, 0.014055, 0.657088], [0.506454, 0.016333, 0.656202], [0.512206, 0.018833, 0.655209], [0.517933, 0.021563, 0.654109], [0.523633, 0.024532, 0.652901], [0.529306, 0.027747, 0.651586], [0.534952, 0.031217, 0.650165], [0.54057, 0.03495, 0.64864], [0.546157, 0.038954, 0.64701], [0.551715, 0.043136, 0.645277], [0.557243, 0.047331, 0.643443], [0.562738, 0.051545, 0.641509], [0.568201, 0.055778, 0.639477], [0.573632, 0.060028, 0.637349], [0.579029, 0.064296, 0.635126], [0.584391, 0.068579, 0.632812], [0.589719, 0.072878, 0.630408], [0.595011, 0.07719, 0.627917], [0.600266, 0.081516, 0.625342], [0.605485, 0.085854, 0.622686], [0.610667, 0.090204, 0.619951], [0.615812, 0.094564, 0.61714], [0.620919, 0.098934, 0.614257], [0.625987, 0.103312, 0.611305], [0.631017, 0.107699, 0.608287], [0.636008, 0.112092, 0.605205], [0.640959, 0.116492, 0.602065], [0.645872, 0.120898, 0.598867], [0.650746, 0.125309, 0.595617], [0.65558, 0.129725, 0.592317], [0.660374, 0.134144, 0.588971], [0.665129, 0.138566, 0.585582], [0.669845, 0.142992, 0.582154], [0.674522, 0.147419, 0.578688], [0.67916, 0.151848, 0.575189], [0.683758, 0.156278, 0.57166], [0.688318, 0.160709, 0.568103], [0.69284, 0.165141, 0.564522], [0.697324, 0.169573, 0.560919], [0.701769, 0.174005, 0.557296], [0.706178, 0.178437, 0.553657], [0.710549, 0.182868, 0.550004], [0.714883, 0.187299, 0.546338], [0.719181, 0.191729, 0.542663], [0.723444, 0.196158, 0.538981], [0.72767, 0.200586, 0.535293], [0.731862, 0.205013, 0.531601], [0.736019, 0.209439, 0.527908], [0.740143, 0.213864, 0.524216], [0.744232, 0.218288, 0.520524], [0.748289, 0.222711, 0.516834], [0.752312, 0.227133, 0.513149], [0.756304, 0.231555, 0.509468], [0.760264, 0.235976, 0.505794], [0.764193, 0.240396, 0.502126], [0.76809, 0.244817, 0.498465], [0.771958, 0.249237, 0.494813], [0.775796, 0.253658, 0.491171], [0.779604, 0.258078, 0.487539], [0.783383, 0.2625, 0.483918], [0.787133, 0.266922, 0.480307], [0.790855, 0.271345, 0.476706], [0.794549, 0.27577, 0.473117], [0.798216, 0.280197, 0.469538], [0.801855, 0.284626, 0.465971], [0.805467, 0.289057, 0.462415], [0.809052, 0.293491, 0.45887], [0.812612, 0.297928, 0.455338], [0.816144, 0.302368, 0.451816], [0.819651, 0.306812, 0.448306], [0.823132, 0.311261, 0.444806], [0.826588, 0.315714, 0.441316], [0.830018, 0.320172, 0.437836], [0.833422, 0.324635, 0.434366], [0.836801, 0.329105, 0.430905], [0.840155, 0.33358, 0.427455], [0.843484, 0.338062, 0.424013], [0.846788, 0.342551, 0.420579], [0.850066, 0.347048, 0.417153], [0.853319, 0.351553, 0.413734], [0.856547, 0.356066, 0.410322], [0.85975, 0.360588, 0.406917], [0.862927, 0.365119, 0.403519], [0.866078, 0.36966, 0.400126], [0.869203, 0.374212, 0.396738], [0.872303, 0.378774, 0.393355], [0.875376, 0.383347, 0.389976], [0.878423, 0.387932, 0.3866], [0.881443, 0.392529, 0.383229], [0.884436, 0.397139, 0.37986], [0.887402, 0.401762, 0.376494], [0.89034, 0.406398, 0.37313], [0.89325, 0.411048, 0.369768], [0.896131, 0.415712, 0.366407], [0.898984, 0.420392, 0.363047], [0.901807, 0.425087, 0.359688], [0.904601, 0.429797, 0.356329], [0.907365, 0.434524, 0.35297], [0.910098, 0.439268, 0.34961], [0.9128, 0.444029, 0.346251], [0.915471, 0.448807, 0.34289], [0.918109, 0.453603, 0.339529], [0.920714, 0.458417, 0.336166], [0.923287, 0.463251, 0.332801], [0.925825, 0.468103, 0.329435], [0.928329, 0.472975, 0.326067], [0.930798, 0.477867, 0.322697], [0.933232, 0.48278, 0.319325], [0.93563, 0.487712, 0.315952], [0.93799, 0.492667, 0.312575], [0.940313, 0.497642, 0.309197], [0.942598, 0.502639, 0.305816], [0.944844, 0.507658, 0.302433], [0.947051, 0.512699, 0.299049], [0.949217, 0.517763, 0.295662], [0.951344, 0.52285, 0.292275], [0.953428, 0.52796, 0.288883], [0.95547, 0.533093, 0.28549], [0.957469, 0.53825, 0.282096], [0.959424, 0.543431, 0.278701], [0.961336, 0.548636, 0.275305], [0.963203, 0.553865, 0.271909], [0.965024, 0.559118, 0.268513], [0.966798, 0.564396, 0.265118], [0.968526, 0.5697, 0.261721], [0.970205, 0.575028, 0.258325], [0.971835, 0.580382, 0.254931], [0.973416, 0.585761, 0.25154], [0.974947, 0.591165, 0.248151], [0.976428, 0.596595, 0.244767], [0.977856, 0.602051, 0.241387], [0.979233, 0.607532, 0.238013], [0.980556, 0.613039, 0.234646], [0.981826, 0.618572, 0.231287], [0.983041, 0.624131, 0.227937], [0.984199, 0.629718, 0.224595], [0.985301, 0.63533, 0.221265], [0.986345, 0.640969, 0.217948], [0.987332, 0.646633, 0.214648], [0.98826, 0.652325, 0.211364], [0.989128, 0.658043, 0.2081], [0.989935, 0.663787, 0.204859], [0.990681, 0.669558, 0.201642], [0.991365, 0.675355, 0.198453], [0.991985, 0.681179, 0.195295], [0.992541, 0.68703, 0.19217], [0.993032, 0.692907, 0.189084], [0.993456, 0.69881, 0.186041], [0.993814, 0.704741, 0.183043], [0.994103, 0.710698, 0.180097], [0.994324, 0.716681, 0.177208], [0.994474, 0.722691, 0.174381], [0.994553, 0.728728, 0.171622], [0.994561, 0.734791, 0.168938], [0.994495, 0.74088, 0.166335], [0.994355, 0.746995, 0.163821], [0.994141, 0.753137, 0.161404], [0.993851, 0.759304, 0.159092], [0.993482, 0.765499, 0.156891], [0.993033, 0.77172, 0.154808], [0.992505, 0.777967, 0.152855], [0.991897, 0.784239, 0.151042], [0.991209, 0.790537, 0.149377], [0.990439, 0.796859, 0.14787], [0.989587, 0.803205, 0.146529], [0.988648, 0.809579, 0.145357], [0.987621, 0.815978, 0.144363], [0.986509, 0.822401, 0.143557], [0.985314, 0.828846, 0.142945], [0.984031, 0.835315, 0.142528], [0.982653, 0.841812, 0.142303], [0.98119, 0.848329, 0.142279], [0.979644, 0.854866, 0.142453], [0.977995, 0.861432, 0.142808], [0.976265, 0.868016, 0.143351], [0.974443, 0.874622, 0.144061], [0.97253, 0.88125, 0.144923], [0.970533, 0.887896, 0.145919], [0.968443, 0.894564, 0.147014], [0.966271, 0.901249, 0.14818], [0.964021, 0.90795, 0.14937], [0.961681, 0.914672, 0.15052], [0.959276, 0.921407, 0.151566], [0.956808, 0.928152, 0.152409], [0.954287, 0.934908, 0.152921], [0.951726, 0.941671, 0.152925], [0.949151, 0.948435, 0.152178], [0.946602, 0.95519, 0.150328], [0.944152, 0.961916, 0.146861], [0.941896, 0.96859, 0.140956], [0.940015, 0.975158, 0.131326]],
  viridis: [[0.267004, 0.004874, 0.329415], [0.26851, 0.009605, 0.335427], [0.269944, 0.014625, 0.341379], [0.271305, 0.019942, 0.347269], [0.272594, 0.025563, 0.353093], [0.273809, 0.031497, 0.358853], [0.274952, 0.037752, 0.364543], [0.276022, 0.044167, 0.370164], [0.277018, 0.050344, 0.375715], [0.277941, 0.056324, 0.381191], [0.278791, 0.062145, 0.386592], [0.279566, 0.067836, 0.391917], [0.280267, 0.073417, 0.397163], [0.280894, 0.078907, 0.402329], [0.281446, 0.08432, 0.407414], [0.281924, 0.089666, 0.412415], [0.282327, 0.094955, 0.417331], [0.282656, 0.100196, 0.42216], [0.28291, 0.105393, 0.426902], [0.283091, 0.110553, 0.431554], [0.283197, 0.11568, 0.436115], [0.283229, 0.120777, 0.440584], [0.283187, 0.125848, 0.44496], [0.283072, 0.130895, 0.449241], [0.282884, 0.13592, 0.453427], [0.282623, 0.140926, 0.457517], [0.28229, 0.145912, 0.46151], [0.281887, 0.150881, 0.465405], [0.281412, 0.155834, 0.469201], [0.280868, 0.160771, 0.472899], [0.280255, 0.165693, 0.476498], [0.279574, 0.170599, 0.479997], [0.278826, 0.17549, 0.483397], [0.278012, 0.180367, 0.486697], [0.277134, 0.185228, 0.489898], [0.276194, 0.190074, 0.493001], [0.275191, 0.194905, 0.496005], [0.274128, 0.199721, 0.498911], [0.273006, 0.20452, 0.501721], [0.271828, 0.209303, 0.504434], [0.270595, 0.214069, 0.507052], [0.269308, 0.218818, 0.509577], [0.267968, 0.223549, 0.512008], [0.26658, 0.228262, 0.514349], [0.265145, 0.232956, 0.516599], [0.263663, 0.237631, 0.518762], [0.262138, 0.242286, 0.520837], [0.260571, 0.246922, 0.522828], [0.258965, 0.251537, 0.524736], [0.257322, 0.25613, 0.526563], [0.255645, 0.260703, 0.528312], [0.253935, 0.265254, 0.529983], [0.252194, 0.269783, 0.531579], [0.250425, 0.27429, 0.533103], [0.248629, 0.278775, 0.534556], [0.246811, 0.283237, 0.535941], [0.244972, 0.287675, 0.53726], [0.243113, 0.292092, 0.538516], [0.241237, 0.296485, 0.539709], [0.239346, 0.300855, 0.540844], [0.237441, 0.305202, 0.541921], [0.235526, 0.309527, 0.542944], [0.233603, 0.313828, 0.543914], [0.231674, 0.318106, 0.544834], [0.229739, 0.322361, 0.545706], [0.227802, 0.326594, 0.546532], [0.225863, 0.330805, 0.547314], [0.223925, 0.334994, 0.548053], [0.221989, 0.339161, 0.548752], [0.220057, 0.343307, 0.549413], [0.21813, 0.347432, 0.550038], [0.21621, 0.351535, 0.550627], [0.214298, 0.355619, 0.551184], [0.212395, 0.359683, 0.55171], [0.210503, 0.363727, 0.552206], [0.208623, 0.367752, 0.552675], [0.206756, 0.371758, 0.553117], [0.204903, 0.375746, 0.553533], [0.203063, 0.379716, 0.553925], [0.201239, 0.38367, 0.554294], [0.19943, 0.387607, 0.554642], [0.197636, 0.391528, 0.554969], [0.19586, 0.395433, 0.555276], [0.1941, 0.399323, 0.555565], [0.192357, 0.403199, 0.555836], [0.190631, 0.407061, 0.556089], [0.188923, 0.41091, 0.556326], [0.187231, 0.414746, 0.556547], [0.185556, 0.41857, 0.556753], [0.183898, 0.422383, 0.556944], [0.182256, 0.426184, 0.55712], [0.180629, 0.429975, 0.557282], [0.179019, 0.433756, 0.55743], [0.177423, 0.437527, 0.557565], [0.175841, 0.44129, 0.557685], [0.174274, 0.445044, 0.557792], [0.172719, 0.448791, 0.557885], [0.171176, 0.45253, 0.557965], [0.169646, 0.456262, 0.55803], [0.168126, 0.459988, 0.558082], [0.166617, 0.463708, 0.558119], [0.165117, 0.467423, 0.558141], [0.163625, 0.471133, 0.558148], [0.162142, 0.474838, 0.55814], [0.160665, 0.47854, 0.558115], [0.159194, 0.482237, 0.558073], [0.157729, 0.485932, 0.558013], [0.15627, 0.489624, 0.557936], [0.154815, 0.493313, 0.55784], [0.153364, 0.497, 0.557724], [0.151918, 0.500685, 0.557587], [0.150476, 0.504369, 0.55743], [0.149039, 0.508051, 0.55725], [0.147607, 0.511733, 0.557049], [0.14618, 0.515413, 0.556823], [0.144759, 0.519093, 0.556572], [0.143343, 0.522773, 0.556295], [0.141935, 0.526453, 0.555991], [0.140536, 0.530132, 0.555659], [0.139147, 0.533812, 0.555298], [0.13777, 0.537492, 0.554906], [0.136408, 0.541173, 0.554483], [0.135066, 0.544853, 0.554029], [0.133743, 0.548535, 0.553541], [0.132444, 0.552216, 0.553018], [0.131172, 0.555899, 0.552459], [0.129933, 0.559582, 0.551864], [0.128729, 0.563265, 0.551229], [0.127568, 0.566949, 0.550556], [0.126453, 0.570633, 0.549841], [0.125394, 0.574318, 0.549086], [0.124395, 0.578002, 0.548287], [0.123463, 0.581687, 0.547445], [0.122606, 0.585371, 0.546557], [0.121831, 0.589055, 0.545623], [0.121148, 0.592739, 0.544641], [0.120565, 0.596422, 0.543611], [0.120092, 0.600104, 0.54253], [0.119738, 0.603785, 0.5414], [0.119512, 0.607464, 0.540218], [0.119423, 0.611141, 0.538982], [0.119483, 0.614817, 0.537692], [0.119699, 0.61849, 0.536347], [0.120081, 0.622161, 0.534946], [0.120638, 0.625828, 0.533488], [0.12138, 0.629492, 0.531973], [0.122312, 0.633153, 0.530398], [0.123444, 0.636809, 0.528763], [0.12478, 0.640461, 0.527068], [0.126326, 0.644107, 0.525311], [0.128087, 0.647749, 0.523491], [0.130067, 0.651384, 0.521608], [0.132268, 0.655014, 0.519661], [0.134692, 0.658636, 0.517649], [0.137339, 0.662252, 0.515571], [0.14021, 0.665859, 0.513427], [0.143303, 0.669459, 0.511215], [0.146616, 0.67305, 0.508936], [0.150148, 0.676631, 0.506589], [0.153894, 0.680203, 0.504172], [0.157851, 0.683765, 0.501686], [0.162016, 0.687316, 0.499129], [0.166383, 0.690856, 0.496502], [0.170948, 0.694384, 0.493803], [0.175707, 0.6979, 0.491033], [0.180653, 0.701402, 0.488189], [0.185783, 0.704891, 0.485273], [0.19109, 0.708366, 0.482284], [0.196571, 0.711827, 0.479221], [0.202219, 0.715272, 0.476084], [0.20803, 0.718701, 0.472873], [0.214, 0.722114, 0.469588], [0.220124, 0.725509, 0.466226], [0.226397, 0.728888, 0.462789], [0.232815, 0.732247, 0.459277], [0.239374, 0.735588, 0.455688], [0.24607, 0.73891, 0.452024], [0.252899, 0.742211, 0.448284], [0.259857, 0.745492, 0.444467], [0.266941, 0.748751, 0.440573], [0.274149, 0.751988, 0.436601], [0.281477, 0.755203, 0.432552], [0.288921, 0.758394, 0.428426], [0.296479, 0.761561, 0.424223], [0.304148, 0.764704, 0.419943], [0.311925, 0.767822, 0.415586], [0.319809, 0.770914, 0.411152], [0.327796, 0.77398, 0.40664], [0.335885, 0.777018, 0.402049], [0.344074, 0.780029, 0.397381], [0.35236, 0.783011, 0.392636], [0.360741, 0.785964, 0.387814], [0.369214, 0.788888, 0.382914], [0.377779, 0.791781, 0.377939], [0.386433, 0.794644, 0.372886], [0.395174, 0.797475, 0.367757], [0.404001, 0.800275, 0.362552], [0.412913, 0.803041, 0.357269], [0.421908, 0.805774, 0.35191], [0.430983, 0.808473, 0.346476], [0.440137, 0.811138, 0.340967], [0.449368, 0.813768, 0.335384], [0.458674, 0.816363, 0.329727], [0.468053, 0.818921, 0.323998], [0.477504, 0.821444, 0.318195], [0.487026, 0.823929, 0.312321], [0.496615, 0.826376, 0.306377], [0.506271, 0.828786, 0.300362], [0.515992, 0.831158, 0.294279], [0.525776, 0.833491, 0.288127], [0.535621, 0.835785, 0.281908], [0.545524, 0.838039, 0.275626], [0.555484, 0.840254, 0.269281], [0.565498, 0.84243, 0.262877], [0.575563, 0.844566, 0.256415], [0.585678, 0.846661, 0.249897], [0.595839, 0.848717, 0.243329], [0.606045, 0.850733, 0.236712], [0.616293, 0.852709, 0.230052], [0.626579, 0.854645, 0.223353], [0.636902, 0.856542, 0.21662], [0.647257, 0.8584, 0.209861], [0.657642, 0.860219, 0.203082], [0.668054, 0.861999, 0.196293], [0.678489, 0.863742, 0.189503], [0.688944, 0.865448, 0.182725], [0.699415, 0.867117, 0.175971], [0.709898, 0.868751, 0.169257], [0.720391, 0.87035, 0.162603], [0.730889, 0.871916, 0.156029], [0.741388, 0.873449, 0.149561], [0.751884, 0.874951, 0.143228], [0.762373, 0.876424, 0.137064], [0.772852, 0.877868, 0.131109], [0.783315, 0.879285, 0.125405], [0.79376, 0.880678, 0.120005], [0.804182, 0.882046, 0.114965], [0.814576, 0.883393, 0.110347], [0.82494, 0.88472, 0.106217], [0.83527, 0.886029, 0.102646], [0.845561, 0.887322, 0.099702], [0.85581, 0.888601, 0.097452], [0.866013, 0.889868, 0.095953], [0.876168, 0.891125, 0.09525], [0.886271, 0.892374, 0.095374], [0.89632, 0.893616, 0.096335], [0.906311, 0.894855, 0.098125], [0.916242, 0.896091, 0.100717], [0.926106, 0.89733, 0.104071], [0.935904, 0.89857, 0.108131], [0.945636, 0.899815, 0.112838], [0.9553, 0.901065, 0.118128], [0.964894, 0.902323, 0.123941], [0.974417, 0.90359, 0.130215], [0.983868, 0.904867, 0.136897], [0.993248, 0.906157, 0.143936]],
  magma: [[0.001462, 0.000466, 0.013866], [0.002258, 0.001295, 0.018331], [0.003279, 0.002305, 0.023708], [0.004512, 0.00349, 0.029965], [0.00595, 0.004843, 0.03713], [0.007588, 0.006356, 0.044973], [0.009426, 0.008022, 0.052844], [0.011465, 0.009828, 0.06075], [0.013708, 0.011771, 0.068667], [0.016156, 0.01384, 0.076603], [0.018815, 0.016026, 0.084584], [0.021692, 0.01832, 0.09261], [0.024792, 0.020715, 0.100676], [0.028123, 0.023201, 0.108787], [0.031696, 0.025765, 0.116965], [0.03552, 0.028397, 0.125209], [0.039608, 0.03109, 0.133515], [0.04383, 0.03383, 0.141886], [0.048062, 0.036607, 0.150327], [0.05232, 0.039407, 0.158841], [0.056615, 0.04216, 0.167446], [0.060949, 0.044794, 0.176129], [0.06533, 0.047318, 0.184892], [0.069764, 0.049726, 0.193735], [0.074257, 0.052017, 0.20266], [0.078815, 0.054184, 0.211667], [0.083446, 0.056225, 0.220755], [0.088155, 0.058133, 0.229922], [0.092949, 0.059904, 0.239164], [0.097833, 0.061531, 0.248477], [0.102815, 0.06301, 0.257854], [0.107899, 0.064335, 0.267289], [0.113094, 0.065492, 0.276784], [0.118405, 0.066479, 0.286321], [0.123833, 0.067295, 0.295879], [0.12938, 0.067935, 0.305443], [0.135053, 0.068391, 0.315], [0.140858, 0.068654, 0.324538], [0.146785, 0.068738, 0.334011], [0.152839, 0.068637, 0.343404], [0.159018, 0.068354, 0.352688], [0.165308, 0.067911, 0.361816], [0.171713, 0.067305, 0.370771], [0.178212, 0.066576, 0.379497], [0.184801, 0.065732, 0.387973], [0.19146, 0.064818, 0.396152], [0.198177, 0.063862, 0.404009], [0.204935, 0.062907, 0.411514], [0.211718, 0.061992, 0.418647], [0.218512, 0.061158, 0.425392], [0.225302, 0.060445, 0.431742], [0.232077, 0.059889, 0.437695], [0.238826, 0.059517, 0.443256], [0.245543, 0.059352, 0.448436], [0.25222, 0.059415, 0.453248], [0.258857, 0.059706, 0.45771], [0.265447, 0.060237, 0.46184], [0.271994, 0.060994, 0.46566], [0.278493, 0.061978, 0.46919], [0.284951, 0.063168, 0.472451], [0.291366, 0.064553, 0.475462], [0.29774, 0.066117, 0.478243], [0.304081, 0.067835, 0.480812], [0.310382, 0.069702, 0.483186], [0.316654, 0.07169, 0.48538], [0.322899, 0.073782, 0.487408], [0.329114, 0.075972, 0.489287], [0.335308, 0.078236, 0.491024], [0.341482, 0.080564, 0.492631], [0.347636, 0.082946, 0.494121], [0.353773, 0.085373, 0.495501], [0.359898, 0.087831, 0.496778], [0.366012, 0.090314, 0.49796], [0.372116, 0.092816, 0.499053], [0.378211, 0.095332, 0.500067], [0.384299, 0.097855, 0.501002], [0.390384, 0.100379, 0.501864], [0.396467, 0.102902, 0.502658], [0.402548, 0.10542, 0.503386], [0.408629, 0.10793, 0.504052], [0.414709, 0.110431, 0.504662], [0.420791, 0.11292, 0.505215], [0.426877, 0.115395, 0.505714], [0.432967, 0.117855, 0.50616], [0.439062, 0.120298, 0.506555], [0.445163, 0.122724, 0.506901], [0.451271, 0.125132, 0.507198], [0.457386, 0.127522, 0.507448], [0.463508, 0.129893, 0.507652], [0.46964, 0.132245, 0.507809], [0.47578, 0.134577, 0.507921], [0.481929, 0.136891, 0.507989], [0.488088, 0.139186, 0.508011], [0.494258, 0.141462, 0.507988], [0.500438, 0.143719, 0.50792], [0.506629, 0.145958, 0.507806], [0.512831, 0.148179, 0.507648], [0.519045, 0.150383, 0.507443], [0.52527, 0.152569, 0.507192], [0.531507, 0.154739, 0.506895], [0.537755, 0.156894, 0.506551], [0.544015, 0.159033, 0.506159], [0.550287, 0.161158, 0.505719], [0.556571, 0.163269, 0.50523], [0.562866, 0.165368, 0.504692], [0.569172, 0.167454, 0.504105], [0.57549, 0.16953, 0.503466], [0.581819, 0.171596, 0.502777], [0.588158, 0.173652, 0.502035], [0.594508, 0.175701, 0.501241], [0.600868, 0.177743, 0.500394], [0.607238, 0.179779, 0.499492], [0.613617, 0.181811, 0.498536], [0.620005, 0.18384, 0.497524], [0.626401, 0.185867, 0.496456], [0.632805, 0.187893, 0.495332], [0.639216, 0.189921, 0.49415], [0.645633, 0.191952, 0.49291], [0.652056, 0.193986, 0.491611], [0.658483, 0.196027, 0.490253], [0.664915, 0.198075, 0.488836], [0.671349, 0.200133, 0.487358], [0.677786, 0.202203, 0.485819], [0.684224, 0.204286, 0.484219], [0.690661, 0.206384, 0.482558], [0.697098, 0.208501, 0.480835], [0.703532, 0.210638, 0.479049], [0.709962, 0.212797, 0.477201], [0.716387, 0.214982, 0.47529], [0.722805, 0.217194, 0.473316], [0.729216, 0.219437, 0.471279], [0.735616, 0.221713, 0.46918], [0.742004, 0.224025, 0.467018], [0.748378, 0.226377, 0.464794], [0.754737, 0.228772, 0.462509], [0.761077, 0.231214, 0.460162], [0.767398, 0.233705, 0.457755], [0.773695, 0.236249, 0.455289], [0.779968, 0.238851, 0.452765], [0.786212, 0.241514, 0.450184], [0.792427, 0.244242, 0.447543], [0.798608, 0.24704, 0.444848], [0.804752, 0.249911, 0.442102], [0.810855, 0.252861, 0.439305], [0.816914, 0.255895, 0.436461], [0.822926, 0.259016, 0.433573], [0.828886, 0.262229, 0.430644], [0.834791, 0.26554, 0.427671], [0.840636, 0.268953, 0.424666], [0.846416, 0.272473, 0.421631], [0.852126, 0.276106, 0.418573], [0.857763, 0.279857, 0.415496], [0.86332, 0.283729, 0.412403], [0.868793, 0.287728, 0.409303], [0.874176, 0.291859, 0.406205], [0.879464, 0.296125, 0.403118], [0.884651, 0.30053, 0.400047], [0.889731, 0.305079, 0.397002], [0.8947, 0.309773, 0.393995], [0.899552, 0.314616, 0.391037], [0.904281, 0.31961, 0.388137], [0.908884, 0.324755, 0.385308], [0.913354, 0.330052, 0.382563], [0.917689, 0.3355, 0.379915], [0.921884, 0.341098, 0.377376], [0.925937, 0.346844, 0.374959], [0.929845, 0.352734, 0.372677], [0.933606, 0.358764, 0.370541], [0.937221, 0.364929, 0.368567], [0.940687, 0.371224, 0.366762], [0.944006, 0.377643, 0.365136], [0.94718, 0.384178, 0.363701], [0.95021, 0.39082, 0.362468], [0.953099, 0.397563, 0.361438], [0.955849, 0.4044, 0.360619], [0.958464, 0.411324, 0.360014], [0.960949, 0.418323, 0.35963], [0.96331, 0.42539, 0.359469], [0.965549, 0.432519, 0.359529], [0.967671, 0.439703, 0.35981], [0.96968, 0.446936, 0.360311], [0.971582, 0.45421, 0.36103], [0.973381, 0.46152, 0.361965], [0.975082, 0.468861, 0.363111], [0.97669, 0.476226, 0.364466], [0.97821, 0.483612, 0.366025], [0.979645, 0.491014, 0.367783], [0.981, 0.498428, 0.369734], [0.982279, 0.505851, 0.371874], [0.983485, 0.51328, 0.374198], [0.984622, 0.520713, 0.376698], [0.985693, 0.528148, 0.379371], [0.9867, 0.535582, 0.38221], [0.987646, 0.543015, 0.38521], [0.988533, 0.550446, 0.388365], [0.989363, 0.557873, 0.391671], [0.990138, 0.565296, 0.395122], [0.990871, 0.572706, 0.398714], [0.991558, 0.580107, 0.402441], [0.992196, 0.587502, 0.406299], [0.992785, 0.594891, 0.410283], [0.993326, 0.602275, 0.41439], [0.993834, 0.609644, 0.418613], [0.994309, 0.616999, 0.42295], [0.994738, 0.62435, 0.427397], [0.995122, 0.631696, 0.431951], [0.99548, 0.639027, 0.436607], [0.99581, 0.646344, 0.441361], [0.996096, 0.653659, 0.446213], [0.996341, 0.660969, 0.45116], [0.99658, 0.668256, 0.456192], [0.996775, 0.675541, 0.461314], [0.996925, 0.682828, 0.466526], [0.997077, 0.690088, 0.471811], [0.997186, 0.697349, 0.477182], [0.997254, 0.704611, 0.482635], [0.997325, 0.711848, 0.488154], [0.997351, 0.719089, 0.493755], [0.997351, 0.726324, 0.499428], [0.997341, 0.733545, 0.505167], [0.997285, 0.740772, 0.510983], [0.997228, 0.747981, 0.516859], [0.997138, 0.75519, 0.522806], [0.997019, 0.762398, 0.528821], [0.996898, 0.769591, 0.534892], [0.996727, 0.776795, 0.541039], [0.996571, 0.783977, 0.547233], [0.996369, 0.791167, 0.553499], [0.996162, 0.798348, 0.55982], [0.995932, 0.805527, 0.566202], [0.99568, 0.812706, 0.572645], [0.995424, 0.819875, 0.57914], [0.995131, 0.827052, 0.585701], [0.994851, 0.834213, 0.592307], [0.994524, 0.841387, 0.598983], [0.994222, 0.84854, 0.605696], [0.993866, 0.855711, 0.612482], [0.993545, 0.862859, 0.619299], [0.99317, 0.870024, 0.626189], [0.992831, 0.877168, 0.633109], [0.99244, 0.88433, 0.640099], [0.992089, 0.89147, 0.647116], [0.991688, 0.898627, 0.654202], [0.991332, 0.905763, 0.661309], [0.99093, 0.912915, 0.668481], [0.99057, 0.920049, 0.675675], [0.990175, 0.927196, 0.682926], [0.989815, 0.934329, 0.690198], [0.989434, 0.94147, 0.697519], [0.989077, 0.948604, 0.704863], [0.988717, 0.955742, 0.712242], [0.988367, 0.962878, 0.719649], [0.988033, 0.970012, 0.727077], [0.987691, 0.977154, 0.734536], [0.987387, 0.984288, 0.742002], [0.987053, 0.991438, 0.749504]],
}

function getRGB(i) {
  if (i[0] == '#') return hex2rgb(i);
  else if (i.length == 3) {
    if (Number.isInteger(i[0])) {
      return {r: i[0] / 255, g: i[1] / 255, b: i[2] / 255};
    } else {
      return {r: i[0], g: i[1], b: i[2]};
    }
  }
}

function hex2rgb(hex) {
  return {
    // skip # at position 0
    r: parseInt(hex.slice(1, 3), 16) / 255,
    g: parseInt(hex.slice(3, 5), 16) / 255,
    b: parseInt(hex.slice(5, 7), 16) / 255
  }
}

function zeroPadHex(hexStr) {
  return '00'.slice(hexStr.length) + hexStr
}

function rgb2hex(rgb) {
  // Map channel triplet into hex color code
  return '#' + [rgb.r, rgb.g, rgb.b]
    // Convert to hex (map [0, 1] => [0, 255] => Z => [0x0, 0xff])
    .map(function(ch) { return Math.round(ch * 255).toString(16) })
    // Make sure each channel is two digits long
    .map(zeroPadHex)
    .join('')
}

function interpolate(a, b) {
  a = getRGB(a);
  b = getRGB(b);
  var ar = a.r
  var ag = a.g
  var ab = a.b
  var br = b.r - ar
  var bg = b.g - ag
  var bb = b.b - ab
  return function(t) {
    return {
      r: ar + br * t,
      g: ag + bg * t,
      b: ab + bb * t
    }
  }
}

function interpolateArray(scaleArr) {
  var N = scaleArr.length - 2 // -1 for spacings, -1 for number of interpolate fns
  var intervalWidth = 1 / N
  var intervals = []
  for (var i = 0; i <= N; i++) {
    intervals[i] = interpolate(scaleArr[i], scaleArr[i + 1])
  }
  return function (t) {
    if (t < 0 || t > 1) throw new Error('Outside the allowed range of [0, 1]')
    var i = Math.floor(t * N)
    var intervalOffset = i * intervalWidth
    return intervals[i](t / intervalWidth - intervalOffset / intervalWidth)
  }
}

/**
 * TouchTexture
 **/

// from https://github.com/brunoimbrizi/interactive-particles/blob/master/src/scripts/webgl/particles/TouchTexture.js
function easeOutSine (t, b, c, d) {
  return c * Math.sin(t/d * (Math.PI/2)) + b;
};

function TouchTexture() {
  this.initialized = false;
  this.size = 512; // smaller is more performant but more susceptible to unit quantization issues
  this.maxAge = 40; // length of trail
  this.radius = 0.05;
  this.cursorRadius = 0.005;
  this.maxForce = 0.4; // max amount of momentum in big gestures
  this.frozen = false;
  this.mouse = {x: 0, y: 0};
  this.pointermoveElem = document.body;
  this.renderCanvas = false;
  this.trail = [];
  this.setTexture();
  this.addEventListeners();
}

TouchTexture.prototype.setTexture = function() {
  this.canvas = document.createElement('canvas');
  this.canvas.width = this.canvas.height = this.size;
  this.ctx = this.canvas.getContext('2d');
  this.ctx.fillStyle = 'black';
  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
  this.texture = new THREE.Texture(this.canvas);
  this.canvas.id = 'touch-texture';
  this.canvas.style.width = this.canvas.style.height = `${this.canvas.width}px`;
  if (this.renderCanvas) document.body.appendChild(this.canvas);
}

TouchTexture.prototype.update = function(delta) {
  if (this.frozen) return;
  this.clear();
  // age points
  this.trail.forEach((point, i) => {
    point.age++;
    // remove old
    if (point.age > this.maxAge) {
      this.trail.splice(i, 1);
    }
  });
  this.trail.forEach(this.drawPoint.bind(this));
  this.drawCursor();
  this.texture.needsUpdate = true;
}

TouchTexture.prototype.clear = function() {
  this.ctx.fillStyle = 'black';
  this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
}

TouchTexture.prototype.addPoint = function(point) {
  let force = 0;
  var last = this.trail[this.trail.length - 1];
  if (last) {
    var dx = last.x - point.x;
    var dy = last.y - point.y;
    var dd = dx**2 + dy**2;
    force = Math.min(dd * 10000, this.maxForce);
  }
  this.trail.push({
    x: point.x,
    y: point.y,
    age: 0,
    force,
  });
}

TouchTexture.prototype.drawPoint = function(point) {
  var pos = {
    x: point.x * this.size,
    y: (1 - point.y) * this.size
  };
  var intensity = 1;
  if (point.age < this.maxAge * 0.3) {
    intensity = easeOutSine(point.age / (this.maxAge * 0.3), 0, 1, 1);
  } else {
    intensity = easeOutSine(1 - (point.age - this.maxAge * 0.3) / (this.maxAge * 0.7), 0, 1, 1);
  }
  intensity *= point.force;
  var radius = this.size * this.radius * intensity;
  var gradient = this.ctx.createRadialGradient(pos.x, pos.y, radius * 0.25, pos.x, pos.y, radius);
  gradient.addColorStop(0, `rgba(255, 255, 255, 0.2)`);
  gradient.addColorStop(1, 'rgba(0, 0, 0, 0.0)');
  this.ctx.beginPath();
  this.ctx.fillStyle = gradient;
  this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);
  this.ctx.fill();
}

TouchTexture.prototype.drawCursor = function() {
  var pos = {
    x: this.mouse.x * this.size,
    y: (1 - this.mouse.y) * this.size
  };
  var radius = this.cursorRadius * this.size * 0.3 / world.camera.position.z;
  // create a gradient with diameter s
  var gradient = this.ctx.createRadialGradient(pos.x, pos.y, radius * 0.001, pos.x, pos.y, radius);
  gradient.addColorStop(0, `rgba(255, 255, 255, 1.0)`);
  gradient.addColorStop(1, 'rgba(0, 0, 0, 0.0)');
  this.ctx.beginPath();
  this.ctx.fillStyle = gradient;
  this.ctx.arc(pos.x, pos.y, radius, 0, Math.PI * 2);
  this.ctx.fill();
}

TouchTexture.prototype.handlePointerMove = function(e) {
  var elem = this.pointermoveElem;
  var w = elem.clientWidth;
  var h = elem.clientHeight;
  // get the initial, unnormalized point coords
  var p = getEventScreenCoords(e);
  // convert x,y to positions within canvas (instead of positions within document/window)
  var elem = e.target;
  while (elem && elem.tag && elem.tag != 'html') {
    var box = elem.getBoundingClientRect();
    p.x -= box.left;
    p.y -= box.top;
    elem = elem.parentNode;
  }
  // normalize the point coords
  p.x = p.x / w;
  p.y = (h-p.y) / h;
  this.addPoint(p);
  this.mouse = p;
}

TouchTexture.prototype.addEventListeners = function() {
  this.pointermoveElem.addEventListener('pointermove', this.handlePointerMove.bind(this));
}

/**
* Picker
**/

function Picker() {
  this.mesh = null;
  this.scene = new THREE.Scene();
  this.scene.background = new THREE.Color(0x000000);
  this.tex = this.getTexture();
  this.initialized = false;
  this.selectedIndex = -1;
}

// get the mesh in which to render picking elements
Picker.prototype.init = function() {
  this.mesh = points.mesh.clone();
  var material = points.getMaterial();
  material.uniforms.useColor.value = 1.0;
  this.mesh.material = material;
  this.scene.add(this.mesh);
  this.initialized = true;
}

// get the texture on which off-screen rendering will happen
Picker.prototype.getTexture = function() {
  var size = getCanvasSize();
  var tex = new THREE.WebGLRenderTarget(size.w * dpi, size.h * dpi);
  tex.texture.minFilter = THREE.LinearFilter;
  return tex;
}

// draw an offscreen world then reset the render target so world can update
Picker.prototype.render = function() {
  world.renderer.setRenderTarget(this.tex);
  world.renderer.render(this.scene, world.camera);
  world.renderer.setRenderTarget(null);
}

Picker.prototype.select = function(obj) {
  this.render();
  // read the texture color at the current mouse pixel
  var pixelBuffer = new Uint8Array(4),
      x = obj.x * dpi,
      y = this.tex.height - obj.y * dpi;
  world.renderer.readRenderTargetPixels(this.tex, x, y, 1, 1, pixelBuffer);
  var id = (pixelBuffer[0] << 16) | (pixelBuffer[1] << 8) | (pixelBuffer[2]),
      cellIdx = id-1; // ids use id+1 as the id of null selections is 0
  return cellIdx;
}

/**
 * Tooltip: displays clicked items
 **/

function Tooltip() {
  this.timeout = null;
  this.worldCoords = null; // store world coords of mouse
  this.target = document.querySelector('#tooltip');
  this.displayed = null;
  this.addEventListeners();
}

// index is the cell index to show; type is hover|click
Tooltip.prototype.display = function(index) {
  clearTimeout(this.timeout);
  // bail if cell metadata isn't available
  if (!points || !points.mesh) return;
  // bail if the user requested the item we're already showing
  if (index === this.displayed) return;
  this.displayed = index;
  // to use the center of the clicked point, pass points.positions[index] to screenToWorldCoords
  this.worldCoords = screenToWorldCoords(mouse);
  this.setPosition();
  // get the html to display
  this.target.innerHTML = this.getTooltipHTML(index)
}

Tooltip.prototype.setPosition = function() {
  var pos = worldToScreenCoords(this.worldCoords);
  this.target.style.left = pos.x + 'px';
  this.target.style.top = pos.y + 'px';
}

Tooltip.prototype.close = function() {
  if (this.displayed > -1) {
    this.displayed = -1;
    this.worldCoords = null;
    this.target.innerHTML = '';
  }
}

Tooltip.prototype.getTooltipHTML = function(index) {
  return points.objects && points.objects[index]
    ? _.template(document.querySelector('#tooltip-template').innerHTML)({
        index: index,
        data: points.objects[index],
      })
    : null
}

Tooltip.prototype.addEventListeners = function() {
  document.querySelector('#tooltip').addEventListener('pointermove', function(e) {
    e.stopPropagation();
  }.bind(this));

  document.querySelector('#tooltip').addEventListener('wheel', function(e) {
    e.stopPropagation();
  }.bind(this));

  world.renderer.domElement.addEventListener('pointermove', function(e) {
    this.close();
  }.bind(this))
}

/**
 * Previews
 **/

function Preview() {
  this.selected = [];
  this.kdbush = null;
  this.hovered = null;
  this.n = state.previews.number;
  this.margin = 100;
  this.timeout = null;
  this.mouseTimeout = null;
  this.sizes = {}; // size cache, maps id to width & height
  this.elems = {
    offscreen: document.querySelector('#offscreen'),
    hovered: document.querySelector('#hovered-preview'),
    cursor: document.querySelector('#cursor'),
  }
  this.requiredAttributes = this.getRequiredAttributes();
  this.addEventListeners();
}

Preview.prototype.createIndex = function(positions) {
  this.kdbush = new KDBush(positions);
}

// select the set of this.n previews to show
Preview.prototype.select = function() {
  var bounds = getWorldBounds();
  var indices = this.kdbush.range(bounds.x[0], bounds.y[0], bounds.x[1], bounds.y[1]).sort((a, b) => a-b);
  for (var i=0; i<indices.length; i++) {
    var index = indices[i];
    // don't stop 'til you get enough
    if (this.selected.length === this.n) break;
    // ensure the current point has all required attributes
    var keep = true;
    for (var j=0; j<this.requiredAttributes.length; j++) {
      if (!(points.objects[index][this.requiredAttributes[j]])) {
        keep = false;
        break;
      }
    }
    if (!keep) continue;
    // create the point object
    var world = {
      x: points.positions[index][0],
      y: points.positions[index][1],
    };
    var screen = worldToScreenCoords(world);
    var d = {
      x: screen.x,
      y: screen.y,
      index: index,
    };
    // ensure elem doesn't overlap with others
    if (this.overlaps(d)) continue;
    // add the elem to the list to be rendered
    d.elem = this.getPreviewHTML(index);
    // ensure the elem exists
    if (!d.elem) continue;
    d.elem.style.left = d.x + 'px';
    d.elem.style.top = d.y + 'px';
    this.selected.push(d);
  }
  // render the selected ids; use documentfragment to prevent reflow after each child is added
  var elem = document.querySelector('#previews-container');
  var children = document.createDocumentFragment();
  this.selected.forEach(function(d) {
    children.appendChild(d.elem);
  })
  elem.appendChild(children);
}

// a & b are objects with x,y,index,elem attrs; d == x|y
Preview.prototype.intersects = function(a, b, d) {
  var aS = this.getElementSize(a); // a size
  var bS = this.getElementSize(b); // b size
  var a0 = a[d]; // a starting pos
  var b0 = b[d]; // b starting pos
  var a1 = a[d] + (d === 'x' ? aS.width : aS.height) + this.margin; // a furthest extension
  var b1 = b[d] + (d === 'x' ? bS.width : bS.height) + this.margin; // b furthest extension
  return a0 >= b0 && a0 <= b1 ||
         a1 >= b0 && a1 <= b1;
}

// given point a with attributes x, y determine if it overlaps other selected points
Preview.prototype.overlaps = function(a) {
  var keep = true;
  for (var i=0; i<this.selected.length; i++) {
    var b = this.selected[i];
    if (
      this.intersects(a, b, 'x') &&
      this.intersects(a, b, 'y')
    ) {
      keep = false;
      break;
    };
  }
  return !keep;
}

Preview.prototype.getElementSize = function(d) {
  // handle statically sized previews
  if (state.previews.size) {
    return {
      width: state.previews.size,
      height: state.previews.size,
    }
  }
  // handle conditionally sized previews; first check cache
  if (d.index in this.sizes) {
    return this.sizes[d.index];
  }
  // then process elements not in cache
  this.elems.offscreen.appendChild(d.elem);
  var box = d.elem.getBoundingClientRect();
  this.elems.offscreen.removeChild(d.elem);
  this.sizes[d.index] = {
    width: box.width,
    height: box.height,
  }
  return this.sizes[d.index];
}

Preview.prototype.getPreviewHTML = function(index) {
  if (!points.initialized) {
    clearTimeout(this.timeout);
    this.timeout = setTimeout(this.getPreviewHTML.bind(this, index), 500);
    return;
  }
  var meta = (points.objects || [])[index];
  // get html string
  var html = _.template(document.querySelector('#preview-template').innerHTML)({
    index: index,
    data: points.objects[index],
    position: points.positions[index],
    color: points.colors[index],
  });
  // convert to DOM Element
  var elem = htmlStringToDom(html);
  elem.style.width = state.previews.size + 'px';
  elem.style.height = state.previews.size + 'px';
  elem.id = 'preview-' + index;
  elem.onpointerup = function(index, e) {
    // pointermove events are paused while hovering previews, so set mouse coords before showing tooltip
    tooltip.display(index);
    // stop propagation to prevent hovered class from disappearing
    e.stopPropagation();
    // pass event information to mouse so it doesn't wait for next mouseup event
    mouse.down = false;
  }.bind(this, index);
  elem.onpointermove = function(index, e) {
    this.setHovered(index);
    // stop propagation to prevent the picker from selecting an adjacent cell
    e.stopPropagation();
    // pass this event to the touchtexture to facilitate trails
    touchtexture.handlePointerMove(e);
    mouse.set(e);
  }.bind(this, index);
  return elem;
}

Preview.prototype.clear = function() {
  if (!this.selected.length) return;
  document.querySelector('#previews-container').innerHTML = '';
  this.elems.hovered.innerHTML = '';
  this.hovered = null;
  this.selected = [];
}

Preview.prototype.redraw = function() {
  clearTimeout(this.timeout);
  if (points.initialized) {
    this.clear();
    this.select();
  }
}

// display the hovered cell
Preview.prototype.setHovered = function(id) {
  // prevent consecutive hovering selections
  clearTimeout(this.mouseTimeout);
  // bail if we're being asked to show the cell we're already showing
  if (id === this.hovered) return;
  // clear the old hovered state
  var previous = document.querySelector('#preview-' + this.hovered);
  if (previous) previous.classList.remove('hovered');
  // set the hovered id
  this.hovered = id;
  // if the id is -1 clear the hovered cell
  if (id === -1) {
    this.elems.hovered.innerHTML = '';
  // if this point is already previewed, update the element
  } else if (this.selected.map(i => i.index).indexOf(id) > -1) {
    // set mouse offscreen to prevent touchtexture focus on point border
    mouse.set({x: -1000, y: -1000});
    document.querySelector('#preview-' + id).classList.add('hovered');
    this.elems.hovered.innerHTML = '';
  // if the point is not already previewed, create it
  } else {
    // otherwise show this cell
    var elem = this.getPreviewHTML(id, 'hovered');
    if (!elem) return this.adjustStates();
    elem.classList.add('hovered');
    elem.style.left = mouse.x + 'px';
    elem.style.top = mouse.y + 'px';
    this.elems.hovered.innerHTML = '';
    this.elems.hovered.appendChild(elem);
  }
  // shrink cells close to the mouse
  this.adjustStates();
}

// adjust the size of previews near the hovered elem
Preview.prototype.adjustStates = function() {
  var cursor = Object.assign({}, mouse, {
    index: -1,
    elem: this.elems.cursor,
  })
  var overlapping = [];
  for (var i=0; i<this.selected.length; i++) {
    (
      this.intersects(cursor, this.selected[i], 'x') &&
      this.intersects(cursor, this.selected[i], 'y') &&
      this.selected[i].index !== this.hovered
    )
      ? this.shrink(this.selected[i].index)
      : this.enlarge(this.selected[i].index);
  }
}

// shrink the size of a preview given the cell id
Preview.prototype.shrink = function(id) {
  var elem = document.querySelector('#preview-' + id);
  elem.style.animationDelay = '0s';
  elem.classList.add('small');
  elem.classList.remove('hovered');
}

// increase the size of a preview given the cell id
Preview.prototype.enlarge = function(id) {
  var elem = document.querySelector('#preview-' + id);
  elem.classList.remove('small');
  // add / remove the pulse class
  if (this.hovered === id) {
    elem.classList.add('pulse');
    elem.classList.add('show-label');
  } else {
    elem.classList.remove('pulse');
    elem.classList.remove('show-label');
  }
}

// measure the delta between e and the position of this.mouse
Preview.prototype.measurePointerMovement = function(e) {
  var p = getEventScreenCoords(e);
  return {
    x: Math.abs(mouse.down.x - p.x),
    y: Math.abs(mouse.down.y - p.y),
  }
}

Preview.prototype.handleMouseUp = function(e) {
  // if the user has dragged too far clear
  if (mouse.dragging) {
    if (world.renderer.domElement.contains(e.target)) {
      this.timeout = setTimeout(function() {
        this.redraw();
      }.bind(this), 250)
    }
  } else {
    this.mouseTimeout = setTimeout(function() {
      this.setHovered(picker.select({x: mouse.x, y: mouse.y}));
    }.bind(this), 300)
  }
}

Preview.prototype.handleMouseMove = function(e) {
  // if the mouse is down and we're dragging, clear the board
  if (mouse.down) {
    // if the user has dragged too far clear
    var d = this.measurePointerMovement(e);
    // do nothing if click is not on canvas
    if (world.renderer.domElement.contains(e.target)) {
      if (d.x > 1 || d.y > 1) {
        mouse.dragging = true;
        this.clear();
      }
    }
  // else check if we're hovering a cell
  } else {
    // once the mouse stops moving, find the hovered point (if any)
    window.clearTimeout(this.mouseTimeout);
    this.mouseTimeout = setTimeout(function() {
      this.setHovered(picker.select({x: mouse.x, y: mouse.y}));
    }.bind(this), 100)
  }
}

Preview.prototype.handleWheel = function() {
  this.clear();
  if (this.timeout) clearTimeout(this.timeout);
  this.timeout = setTimeout(function() {
    this.redraw();
  }.bind(this), 700)
}

Preview.prototype.handleResize = function() {
  this.clear();
  if (this.timeout) clearTimeout(this.timeout);
  this.timeout = setTimeout(function() {
    this.redraw();
  }.bind(this), 200)
}

Preview.prototype.addEventListeners = function() {
  window.addEventListener('pointermove', this.handleMouseMove.bind(this))
  window.addEventListener('touchmove', this.handleMouseMove.bind(this))

  window.addEventListener('pointerup', this.handleMouseUp.bind(this))
  window.addEventListener('touchend', this.handleMouseUp.bind(this), { passive: false })

  window.addEventListener('resize', this.handleResize.bind(this))
  window.addEventListener('wheel', this.handleWheel.bind(this), { passive: true })
}

Preview.prototype.getRequiredAttributes = function() {
  var template = document.querySelector('#preview-template').innerHTML;
  var words = [];
  template.split(' ').forEach(function(word) {
    if (word.includes('data.')) {
      word = word.split('data.')[1];
      word = word.split(')')[0];
      word = word.split('.')[0];
      words.push(word);
    }
  })
  return words;
}

/**
 * Lasso
 **/

function Lasso() {
  this.clock = new THREE.Clock(); // clock for animating polyline
  this.time = 0; // time counter for animating polyline
  this.points = []; // array of {x: y: } point objects tracing user polyline
  this.enabled = false; // boolean indicating if any actions on the lasso are permitted
  this.capturing = false; // boolean indicating if we're recording pointermoves
  this.frozen = false; // boolean indicating whether to listen to mouse events
  this.mesh = null; // the rendered polyline outlining user selection
  this.selected = {}; // d[cell idx] = bool indicating if selected
  this.displayed = false; // bool indicating whether the modal is displayed
  this.pointerdownCoords = {}; // obj storing x, y, z coords of pointerdown
  this.addEventListeners();
}

Lasso.prototype.handlePointerDown = function(e) {
  if (!this.enabled) return;
  this.pointerdownCoords = getEventScreenCoords(e);
  this.setCapturing(true);
  this.setFrozen(false);
}

Lasso.prototype.handlePointerMove = function(e) {
  if (!this.capturing || this.frozen) return;
  this.points.push(getEventWorldCoords(e));
  this.draw();
}

Lasso.prototype.handlePointerUp = function(e) {
  if (!this.enabled) return;
  // prevent the lasso points from changing
  this.setFrozen(true);
  // if the user registered a click, clear the lasso
  var coords = getEventScreenCoords(e);
  if (
    coords.x == mouse.down.x &&
    coords.y == mouse.down.y
  ) this.clear();
  // prevent the lasso from updating its points boundary
  this.setCapturing(false);
}

Lasso.prototype.setEnabled = function(bool) {
  this.enabled = bool;
}

Lasso.prototype.setCapturing = function(bool) {
  this.capturing = bool;
}

Lasso.prototype.setFrozen = function(bool) {
  this.frozen = bool;
}

Lasso.prototype.draw = function() {
  if (this.points.length < 4) return;
  this.points = this.getHull();
  // remove the old mesh
  this.removeMesh();
  // store the indices of images that are inside the polygon
  this.selected = this.getSelectedMap();
  // highlight the selected images
  this.highlightSelected();
  // obtain and store a mesh, then add the mesh to the scene
  this.mesh = this.getMesh();
  world.scene.add(this.mesh);
}

Lasso.prototype.highlightSelected = function() {
  // create the attribute for the selected cells
  var attr = new Float32Array(points.objects.length);
  for (var i=0; i<points.objects.length; i++) {
    attr[i] = this.selected[i] ? 1.0 : 0.0;
  }
  points.setAttribute('selected', attr);
}

// return d[index] = bool indicating selected
Lasso.prototype.getSelectedMap = function() {
  var polygon = this.points.map(function(i) {
    return [i.x, i.y]
  });
  var selected = {};
  for (var i=0; i<points.positions.length; i++) {
    var p = [points.positions[i][0], points.positions[i][1]];
    selected[i] = pointInPolygon(p, polygon);
  }
  return selected;
}

Lasso.prototype.getMesh = function() {
  // create a list of points to draw - the last point closes the loop
  var points = [];
  for (var i=0; i<this.points.length; i++) {
    var p = this.points[i];
    points.push(new THREE.Vector3(p.x, p.y, 0));
  }
  points.push(points[0]);
  // transform those points to a polyline
  var lengths = getCumulativeLengths(points);
  var geometry = new THREE.BufferGeometry().setFromPoints(points);
  var lengthAttr = new THREE.BufferAttribute(new Float32Array(lengths), 1);
  geometry.setAttribute('length', lengthAttr);
  var material = new THREE.RawShaderMaterial({
    uniforms: {
      time: { type: 'float', value: 0 },
      render: { type: 'bool', value: true },
    },
    vertexShader: `
      precision highp float;

      uniform mat4 modelViewMatrix;
      uniform mat4 projectionMatrix;
      uniform vec3 cameraPosition;

      attribute vec3 position;
      attribute float length;

      varying float vLength;

      void main() {
        vLength = length;
        vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
        gl_Position = projectionMatrix * mvPosition;
      }
    `,
    fragmentShader: `
      precision highp float;

      uniform vec3 cameraPosition;
      uniform bool render;
      uniform float time;

      varying float vLength;

      void main() {
        if (!render) discard;
        float dashSize = 0.01 * cameraPosition.z;
        float gapSize = 0.005 * cameraPosition.z;
        if (mod(vLength + time, dashSize + gapSize) > dashSize) discard;
        gl_FragColor = vec4(0.5, 0.5, 0.5, 1.0);
      }
    `,
  });
  var mesh = new THREE.Line(geometry, material);
  mesh.frustumCulled = false;
  return mesh;
}

Lasso.prototype.removeMesh = function() {
  if (this.mesh) world.scene.remove(this.mesh);
}

// get the convex hull of this.points
Lasso.prototype.getHull = function() {
  var l = new ConvexHullGrahamScan();
  for (var i=0; i<this.points.length; i++) {
    l.addPoint(this.points[i].x, this.points[i].y);
  }
  var hull = l.getHull();
  return hull;
}

Lasso.prototype.update = function() {
  if (!this.enabled) return;
  if (this.mesh) {
    this.time += this.clock.getDelta() / 10;
    this.mesh.material.uniforms.time.value = this.time;
  }
}

Lasso.prototype.addEventListeners = function() {
  window.addEventListener('pointerdown', this.handlePointerDown.bind(this));
  window.addEventListener('touchstart', this.handlePointerDown.bind(this), { passive: false });

  window.addEventListener('pointermove', this.handlePointerMove.bind(this));
  window.addEventListener('touchmove', this.handlePointerMove.bind(this), { passive: false });

  window.addEventListener('pointerup', this.handlePointerUp.bind(this));
  window.addEventListener('touchend', this.handlePointerUp.bind(this), { passive: false });

  document.querySelector('#lasso-button').addEventListener('click', function() {
    this.enabled = true;
    this.capturing = true;
  }.bind(this))
}

// 2D convex hull via https://github.com/brian3kb/graham_scan_js
function ConvexHullGrahamScan() {
  this.anchorPoint = undefined;
  this.reverse = false;
  this.points = [];
}

ConvexHullGrahamScan.prototype = {
  constructor: ConvexHullGrahamScan,

  Point: function (x, y) {
    this.x = x;
    this.y = y;
  },

  _findPolarAngle: function (a, b) {
    var ONE_RADIAN = 57.295779513082;
    var deltaX, deltaY;
    // if the points are undefined, return a zero difference angle.
    if (!a || !b) return 0;
    deltaX = (b.x - a.x);
    deltaY = (b.y - a.y);
    if (deltaX == 0 && deltaY == 0) return 0;
    var angle = Math.atan2(deltaY, deltaX) * ONE_RADIAN;
    if (this.reverse) {
      if (angle <= 0) angle += 360;
    } else {
      if (angle >= 0) angle += 360;
    }
    return angle;
  },

  addPoint: function (x, y) {
    // check for a new anchor
    var newAnchor =
      ( this.anchorPoint === undefined ) ||
      ( this.anchorPoint.y > y ) ||
      ( this.anchorPoint.y === y && this.anchorPoint.x > x );
    if ( newAnchor ) {
      if ( this.anchorPoint !== undefined ) {
        this.points.push(new this.Point(this.anchorPoint.x, this.anchorPoint.y));
      }
      this.anchorPoint = new this.Point(x, y);
    } else {
      this.points.push(new this.Point(x, y));
    }
  },

  _sortPoints: function () {
    var self = this;
    return this.points.sort(function (a, b) {
      var polarA = self._findPolarAngle(self.anchorPoint, a);
      var polarB = self._findPolarAngle(self.anchorPoint, b);
      if (polarA < polarB) return -1;
      if (polarA > polarB) return 1;
      return 0;
    });
  },

  _checkPoints: function (p0, p1, p2) {
    var difAngle;
    var cwAngle = this._findPolarAngle(p0, p1);
    var ccwAngle = this._findPolarAngle(p0, p2);
    if (cwAngle > ccwAngle) {
      difAngle = cwAngle - ccwAngle;
      return !(difAngle > 180);
    } else if (cwAngle < ccwAngle) {
      difAngle = ccwAngle - cwAngle;
      return (difAngle > 180);
    }
    return true;
  },

  getHull: function () {
    var hullPoints = [],
        points,
        pointsLength;
    this.reverse = this.points.every(function(point) {
      return (point.x < 0 && point.y < 0);
    });
    points = this._sortPoints();
    pointsLength = points.length;
    // if there are less than 3 points, joining these points creates a correct hull.
    if (pointsLength < 3) {
      points.unshift(this.anchorPoint);
      return points;
    }
    // move first two points to output array
    hullPoints.push(points.shift(), points.shift());
    // scan is repeated until no concave points are present.
    while (true) {
      var p0,
          p1,
          p2;
      hullPoints.push(points.shift());
      p0 = hullPoints[hullPoints.length - 3];
      p1 = hullPoints[hullPoints.length - 2];
      p2 = hullPoints[hullPoints.length - 1];
      if (this._checkPoints(p0, p1, p2)) {
        hullPoints.splice(hullPoints.length - 2, 1);
      }
      if (points.length == 0) {
        if (pointsLength == hullPoints.length) {
          // check for duplicate anchorPoint edge-case, if not found, add the anchorpoint as the first item.
          var ap = this.anchorPoint;
          // remove any udefined elements in the hullPoints array.
          hullPoints = hullPoints.filter(function(p) { return !!p; });
          if (!hullPoints.some(function(p) {
              return (p.x == ap.x && p.y == ap.y);
            })) {
            hullPoints.unshift(this.anchorPoint);
          }
          return hullPoints;
        }
        points = hullPoints;
        pointsLength = points.length;
        hullPoints = [];
        hullPoints.push(points.shift(), points.shift());
      }
    }
  }
};

// get the geometric mean of `points`
function getCentroid(points) {
  if (!points) points = this.getHull();
  var center = {x: 0, y: 0};
  for (var i=0; i<points.length; i++) {
    center.x += points[i].x;
    center.y += points[i].y;
  }
  return {
    x: center.x / points.length,
    y: center.y / points.length,
  }
}

// find the cumulative length of the line up to each point
function getCumulativeLengths(points) {
  var lengths = [];
  var sum = 0;
  for (var i=0; i<points.length; i++) {
    if (i>0) sum += points[i].distanceTo(points[i - 1]);
    lengths[i] = sum;
  };
  return lengths;
}

// via https://github.com/substack/point-in-polygon
function pointInPolygon(point, polygon) {
  var x = point[0], y = point[1];
  var inside = false;
  for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
    var xi = polygon[i][0], yi = polygon[i][1];
    var xj = polygon[j][0], yj = polygon[j][1];
    var intersect = ((yi > y) != (yj > y))
        && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
    if (intersect) inside = !inside;
  }
  return inside;
}

/**
 * One listener for all mouse events
 **/

function Mouse() {
  this.x = 0;
  this.y = 0;
  this.down = false;
  this.dragging = false;
  this.addEventListeners();
}

Mouse.prototype.getEventMeta = function(e) {
  return {
    bubbles: true,
    detail: {
      e: e,
      dragging: this.dragging,
      pos: getEventScreenCoords(e),
    }
  }
}

Mouse.prototype.set = function(e) {
  var p = getEventScreenCoords(e);
  this.x = p.x;
  this.y = p.y;
}

Mouse.prototype.addEventListeners = function() {

  window.addEventListener('pointermove', function(e) {
    this.set(e);
    this.dragging = this.down && (
      Math.abs(this.x - this.down.x) > 1 ||
      Math.abs(this.y - this.down.y) > 1
    ) ? true : false;
    //e.target.dispatchEvent(new CustomEvent('trails-pointermove', this.getEventMeta(e)));
  }.bind(this))

  window.addEventListener('pointerdown', function(e) {
    this.down = getEventScreenCoords(e);
    //e.target.dispatchEvent(new CustomEvent('trails-pointerdown', this.getEventMeta(e)));
  }.bind(this))

  // reset dragging after propagation so pointerup knows if we're finishing a drag
  window.addEventListener('pointerup', function(e) {
    //e.target.dispatchEvent(new CustomEvent('trails-pointerup', this.getEventMeta(e)));
    this.dragging = false;
    this.down = false;
  }.bind(this))

}

/**
 * GUI
 **/

function GUI() {
  this.gui = new dat.GUI();
  // points
  var folder = this.gui.addFolder('Points');
  folder.add(state.points, 'size', 0.0, 20.0).onChange(function(val) {
    points.mesh.material.uniforms.size.value = val;
  }.bind(this));
  folder.add(state.points, 'colors', ['blues', 'plasma', 'viridis', 'magma', 'perlin']).onChange(function(val) {
    points.setColors();
  })
  // previews
  var folder = this.gui.addFolder('Previews');
  folder.add(state.previews, 'number', 0, 200).onFinishChange(function(val) {
    preview.n = parseInt(val);
    preview.redraw();
  }.bind(this));
  folder.add(state.previews, 'size', 0, 200).onFinishChange(function(val) {
    preview.size = parseInt(val);
    preview.redraw();
  }.bind(this))
  // bloom
  var folder = this.gui.addFolder('Glow');
  folder.add(state.glow, 'exposure', 0.1, 10).onChange(function(val) {
    world.renderer.toneMappingExposure = val;
  }.bind(this))
  folder.add(state.glow, 'threshold', 0, 2).onChange(function(val) {
    world.bloom.threshold = val;
  }.bind(this))
  folder.add(state.glow, 'strength', 0, 3).onChange(function(val) {
    world.bloom.strength = val;
  }.bind(this))
  folder.add(state.glow, 'radius', 0, 1).onChange(function(val) {
    world.bloom.radius = val;
  }.bind(this))
}

/**
 * Utils
 **/

function getCanvasSize() {
  var container = document.querySelector('#canvas-container');
  return {
    w: container.clientWidth,
    h: container.clientHeight,
  }
}

function getEventScreenCoords(e) {
  return {
    x: e.touches && e.touches[0] && 'clientX' in e.touches[0]
      ? e.touches[0].clientX
      : e.changedTouches && e.changedTouches[0] && 'clientX' in e.changedTouches[0]
      ? e.changedTouches[0].clientX
      : e.clientX
      ? e.clientX
      : e.pageX,
    y: e.touches && e.touches[0] && 'clientY' in e.touches[0]
      ? e.touches[0].clientY
      : e.changedTouches && e.changedTouches[0] && 'clientY' in e.changedTouches[0]
      ? e.changedTouches[0].clientY
      : e.clientY
      ? e.clientY
      : e.pageY,
  }
}

function getEventWorldCoords(e) {
  var pos = getEventScreenCoords(e);
  return screenToWorldCoords(pos);
}

function screenToWorldCoords(pos) {
  var vector = new THREE.Vector3(),
      mouse = new THREE.Vector2(),
      // convert from screen to clip space
      x = (pos.x / world.renderer.domElement.clientWidth) * 2 - 1,
      y = -(pos.y / world.renderer.domElement.clientHeight) * 2 + 1;
  // project the screen location into world coords
  vector.set(x, y, 0.5);
  vector.unproject(world.camera);
  var direction = vector.sub(world.camera.position).normalize(),
      distance = - world.camera.position.z / direction.z,
      scaled = direction.multiplyScalar(distance),
      coords = world.camera.position.clone().add(scaled);
  return coords;
}

function worldToScreenCoords(pos) {
  var s = getCanvasSize(),
      w = s.w / 2,
      h = s.h / 2,
      vec = new THREE.Vector3(pos.x, pos.y, pos.z || 0);
  vec.project(world.camera);
  vec.x =  (vec.x * w) + w;
  vec.y = -(vec.y * h) + h;
  // add offsets that account for the negative margins in the canvas position
  var rect = world.renderer.domElement.getBoundingClientRect();
  return {
    x: vec.x + rect.left,
    y: vec.y + rect.top
  };
}

function getWorldBounds() {
  var min = screenToWorldCoords({
    x: 0,
    y: window.innerHeight,
  });
  var max = screenToWorldCoords({
    x: window.innerWidth,
    y: 0,
  })
  return {
    x: [min.x, max.x],
    y: [min.y, max.y],
  }
}

function getTexture(src) {
  var image = document.createElement('img');
  var tex = new THREE.Texture(image);
  image.addEventListener('load', function(event) {
    tex.needsUpdate = true;
  });
  image.src = src;
  return tex;
}

function htmlStringToDom(s) {
  var wrapper = document.createElement('div');
  wrapper.innerHTML = s;
  return wrapper.firstChild.nextSibling;
}

/**
* Main
**/

var state = new State();
var world = new World();
var picker = new Picker();
var touchtexture = new TouchTexture();
var points = new Points();
var tooltip = new Tooltip();
var stats = new Stats();
var preview = new Preview();
var mouse = new Mouse();
var gui = new GUI();
var lasso = null; //new Lasso();

points.init();
world.resize();
world.render();

document.querySelector('#elements').appendChild(stats.dom);
stats.begin();